// node_modules/gsplat/dist/index.js
var A = class _A {
  constructor(A2 = 0, Q2 = 0, F2 = 0) {
    this.x = A2, this.y = Q2, this.z = F2;
  }
  equals(A2) {
    return this.x === A2.x && (this.y === A2.y && this.z === A2.z);
  }
  add(Q2) {
    return "number" == typeof Q2 ? new _A(this.x + Q2, this.y + Q2, this.z + Q2) : new _A(this.x + Q2.x, this.y + Q2.y, this.z + Q2.z);
  }
  subtract(Q2) {
    return "number" == typeof Q2 ? new _A(this.x - Q2, this.y - Q2, this.z - Q2) : new _A(this.x - Q2.x, this.y - Q2.y, this.z - Q2.z);
  }
  multiply(Q2) {
    return "number" == typeof Q2 ? new _A(this.x * Q2, this.y * Q2, this.z * Q2) : Q2 instanceof _A ? new _A(this.x * Q2.x, this.y * Q2.y, this.z * Q2.z) : new _A(this.x * Q2.buffer[0] + this.y * Q2.buffer[4] + this.z * Q2.buffer[8] + Q2.buffer[12], this.x * Q2.buffer[1] + this.y * Q2.buffer[5] + this.z * Q2.buffer[9] + Q2.buffer[13], this.x * Q2.buffer[2] + this.y * Q2.buffer[6] + this.z * Q2.buffer[10] + Q2.buffer[14]);
  }
  cross(Q2) {
    const F2 = this.y * Q2.z - this.z * Q2.y, B2 = this.z * Q2.x - this.x * Q2.z, U2 = this.x * Q2.y - this.y * Q2.x;
    return new _A(F2, B2, U2);
  }
  dot(A2) {
    return this.x * A2.x + this.y * A2.y + this.z * A2.z;
  }
  lerp(Q2, F2) {
    return new _A(this.x + (Q2.x - this.x) * F2, this.y + (Q2.y - this.y) * F2, this.z + (Q2.z - this.z) * F2);
  }
  magnitude() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  distanceTo(A2) {
    return Math.sqrt((this.x - A2.x) ** 2 + (this.y - A2.y) ** 2 + (this.z - A2.z) ** 2);
  }
  normalize() {
    const Q2 = this.magnitude();
    return new _A(this.x / Q2, this.y / Q2, this.z / Q2);
  }
  flat() {
    return [this.x, this.y, this.z];
  }
  clone() {
    return new _A(this.x, this.y, this.z);
  }
  toString() {
    return `[${this.flat().join(", ")}]`;
  }
  static One(Q2 = 1) {
    return new _A(Q2, Q2, Q2);
  }
};
var Q = class _Q {
  constructor(A2 = 0, Q2 = 0, F2 = 0, B2 = 1) {
    this.x = A2, this.y = Q2, this.z = F2, this.w = B2;
  }
  equals(A2) {
    return this.x === A2.x && (this.y === A2.y && (this.z === A2.z && this.w === A2.w));
  }
  normalize() {
    const A2 = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    return new _Q(this.x / A2, this.y / A2, this.z / A2, this.w / A2);
  }
  multiply(A2) {
    const F2 = this.w, B2 = this.x, U2 = this.y, l2 = this.z, t2 = A2.w, d2 = A2.x, n2 = A2.y, V2 = A2.z;
    return new _Q(F2 * d2 + B2 * t2 + U2 * V2 - l2 * n2, F2 * n2 - B2 * V2 + U2 * t2 + l2 * d2, F2 * V2 + B2 * n2 - U2 * d2 + l2 * t2, F2 * t2 - B2 * d2 - U2 * n2 - l2 * V2);
  }
  inverse() {
    const A2 = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    return new _Q(-this.x / A2, -this.y / A2, -this.z / A2, this.w / A2);
  }
  apply(F2) {
    const B2 = new _Q(F2.x, F2.y, F2.z, 0), U2 = new _Q(-this.x, -this.y, -this.z, this.w), l2 = this.multiply(B2).multiply(U2);
    return new A(l2.x, l2.y, l2.z);
  }
  flat() {
    return [this.x, this.y, this.z, this.w];
  }
  clone() {
    return new _Q(this.x, this.y, this.z, this.w);
  }
  static FromEuler(A2) {
    const F2 = A2.x / 2, B2 = A2.y / 2, U2 = A2.z / 2, l2 = Math.cos(B2), t2 = Math.sin(B2), d2 = Math.cos(F2), n2 = Math.sin(F2), V2 = Math.cos(U2), Z2 = Math.sin(U2);
    return new _Q(l2 * n2 * V2 + t2 * d2 * Z2, t2 * d2 * V2 - l2 * n2 * Z2, l2 * d2 * Z2 - t2 * n2 * V2, l2 * d2 * V2 + t2 * n2 * Z2);
  }
  toEuler() {
    const Q2 = 2 * (this.w * this.x + this.y * this.z), F2 = 1 - 2 * (this.x * this.x + this.y * this.y), B2 = Math.atan2(Q2, F2);
    let U2;
    const l2 = 2 * (this.w * this.y - this.z * this.x);
    U2 = Math.abs(l2) >= 1 ? Math.sign(l2) * Math.PI / 2 : Math.asin(l2);
    const t2 = 2 * (this.w * this.z + this.x * this.y), d2 = 1 - 2 * (this.y * this.y + this.z * this.z), n2 = Math.atan2(t2, d2);
    return new A(B2, U2, n2);
  }
  static FromMatrix3(A2) {
    const F2 = A2.buffer, B2 = F2[0] + F2[4] + F2[8];
    let U2, l2, t2, d2;
    if (B2 > 0) {
      const A3 = 0.5 / Math.sqrt(B2 + 1);
      d2 = 0.25 / A3, U2 = (F2[7] - F2[5]) * A3, l2 = (F2[2] - F2[6]) * A3, t2 = (F2[3] - F2[1]) * A3;
    } else if (F2[0] > F2[4] && F2[0] > F2[8]) {
      const A3 = 2 * Math.sqrt(1 + F2[0] - F2[4] - F2[8]);
      d2 = (F2[7] - F2[5]) / A3, U2 = 0.25 * A3, l2 = (F2[1] + F2[3]) / A3, t2 = (F2[2] + F2[6]) / A3;
    } else if (F2[4] > F2[8]) {
      const A3 = 2 * Math.sqrt(1 + F2[4] - F2[0] - F2[8]);
      d2 = (F2[2] - F2[6]) / A3, U2 = (F2[1] + F2[3]) / A3, l2 = 0.25 * A3, t2 = (F2[5] + F2[7]) / A3;
    } else {
      const A3 = 2 * Math.sqrt(1 + F2[8] - F2[0] - F2[4]);
      d2 = (F2[3] - F2[1]) / A3, U2 = (F2[2] + F2[6]) / A3, l2 = (F2[5] + F2[7]) / A3, t2 = 0.25 * A3;
    }
    return new _Q(U2, l2, t2, d2);
  }
  static FromAxisAngle(A2, F2) {
    const B2 = F2 / 2, U2 = Math.sin(B2), l2 = Math.cos(B2);
    return new _Q(A2.x * U2, A2.y * U2, A2.z * U2, l2);
  }
  toString() {
    return `[${this.flat().join(", ")}]`;
  }
};
var F = class {
  constructor() {
    const A2 = /* @__PURE__ */ new Map();
    this.addEventListener = (Q2, F2) => {
      A2.has(Q2) || A2.set(Q2, /* @__PURE__ */ new Set()), A2.get(Q2).add(F2);
    }, this.removeEventListener = (Q2, F2) => {
      A2.has(Q2) && A2.get(Q2).delete(F2);
    }, this.hasEventListener = (Q2, F2) => !!A2.has(Q2) && A2.get(Q2).has(F2), this.dispatchEvent = (Q2) => {
      if (A2.has(Q2.type))
        for (const F2 of A2.get(Q2.type))
          F2(Q2);
    };
  }
};
var B = class _B {
  constructor(A2 = 1, Q2 = 0, F2 = 0, B2 = 0, U2 = 0, l2 = 1, t2 = 0, d2 = 0, n2 = 0, V2 = 0, Z2 = 1, e2 = 0, I2 = 0, R2 = 0, a2 = 0, g2 = 1) {
    this.buffer = [A2, Q2, F2, B2, U2, l2, t2, d2, n2, V2, Z2, e2, I2, R2, a2, g2];
  }
  equals(A2) {
    if (this.buffer.length !== A2.buffer.length)
      return false;
    if (this.buffer === A2.buffer)
      return true;
    for (let Q2 = 0; Q2 < this.buffer.length; Q2++)
      if (this.buffer[Q2] !== A2.buffer[Q2])
        return false;
    return true;
  }
  multiply(A2) {
    const Q2 = this.buffer, F2 = A2.buffer;
    return new _B(F2[0] * Q2[0] + F2[1] * Q2[4] + F2[2] * Q2[8] + F2[3] * Q2[12], F2[0] * Q2[1] + F2[1] * Q2[5] + F2[2] * Q2[9] + F2[3] * Q2[13], F2[0] * Q2[2] + F2[1] * Q2[6] + F2[2] * Q2[10] + F2[3] * Q2[14], F2[0] * Q2[3] + F2[1] * Q2[7] + F2[2] * Q2[11] + F2[3] * Q2[15], F2[4] * Q2[0] + F2[5] * Q2[4] + F2[6] * Q2[8] + F2[7] * Q2[12], F2[4] * Q2[1] + F2[5] * Q2[5] + F2[6] * Q2[9] + F2[7] * Q2[13], F2[4] * Q2[2] + F2[5] * Q2[6] + F2[6] * Q2[10] + F2[7] * Q2[14], F2[4] * Q2[3] + F2[5] * Q2[7] + F2[6] * Q2[11] + F2[7] * Q2[15], F2[8] * Q2[0] + F2[9] * Q2[4] + F2[10] * Q2[8] + F2[11] * Q2[12], F2[8] * Q2[1] + F2[9] * Q2[5] + F2[10] * Q2[9] + F2[11] * Q2[13], F2[8] * Q2[2] + F2[9] * Q2[6] + F2[10] * Q2[10] + F2[11] * Q2[14], F2[8] * Q2[3] + F2[9] * Q2[7] + F2[10] * Q2[11] + F2[11] * Q2[15], F2[12] * Q2[0] + F2[13] * Q2[4] + F2[14] * Q2[8] + F2[15] * Q2[12], F2[12] * Q2[1] + F2[13] * Q2[5] + F2[14] * Q2[9] + F2[15] * Q2[13], F2[12] * Q2[2] + F2[13] * Q2[6] + F2[14] * Q2[10] + F2[15] * Q2[14], F2[12] * Q2[3] + F2[13] * Q2[7] + F2[14] * Q2[11] + F2[15] * Q2[15]);
  }
  clone() {
    const A2 = this.buffer;
    return new _B(A2[0], A2[1], A2[2], A2[3], A2[4], A2[5], A2[6], A2[7], A2[8], A2[9], A2[10], A2[11], A2[12], A2[13], A2[14], A2[15]);
  }
  determinant() {
    const A2 = this.buffer;
    return A2[12] * A2[9] * A2[6] * A2[3] - A2[8] * A2[13] * A2[6] * A2[3] - A2[12] * A2[5] * A2[10] * A2[3] + A2[4] * A2[13] * A2[10] * A2[3] + A2[8] * A2[5] * A2[14] * A2[3] - A2[4] * A2[9] * A2[14] * A2[3] - A2[12] * A2[9] * A2[2] * A2[7] + A2[8] * A2[13] * A2[2] * A2[7] + A2[12] * A2[1] * A2[10] * A2[7] - A2[0] * A2[13] * A2[10] * A2[7] - A2[8] * A2[1] * A2[14] * A2[7] + A2[0] * A2[9] * A2[14] * A2[7] + A2[12] * A2[5] * A2[2] * A2[11] - A2[4] * A2[13] * A2[2] * A2[11] - A2[12] * A2[1] * A2[6] * A2[11] + A2[0] * A2[13] * A2[6] * A2[11] + A2[4] * A2[1] * A2[14] * A2[11] - A2[0] * A2[5] * A2[14] * A2[11] - A2[8] * A2[5] * A2[2] * A2[15] + A2[4] * A2[9] * A2[2] * A2[15] + A2[8] * A2[1] * A2[6] * A2[15] - A2[0] * A2[9] * A2[6] * A2[15] - A2[4] * A2[1] * A2[10] * A2[15] + A2[0] * A2[5] * A2[10] * A2[15];
  }
  invert() {
    const A2 = this.buffer, Q2 = this.determinant();
    if (0 === Q2)
      throw new Error("Matrix is not invertible.");
    const F2 = 1 / Q2;
    return new _B(F2 * (A2[5] * A2[10] * A2[15] - A2[5] * A2[11] * A2[14] - A2[9] * A2[6] * A2[15] + A2[9] * A2[7] * A2[14] + A2[13] * A2[6] * A2[11] - A2[13] * A2[7] * A2[10]), F2 * (-A2[1] * A2[10] * A2[15] + A2[1] * A2[11] * A2[14] + A2[9] * A2[2] * A2[15] - A2[9] * A2[3] * A2[14] - A2[13] * A2[2] * A2[11] + A2[13] * A2[3] * A2[10]), F2 * (A2[1] * A2[6] * A2[15] - A2[1] * A2[7] * A2[14] - A2[5] * A2[2] * A2[15] + A2[5] * A2[3] * A2[14] + A2[13] * A2[2] * A2[7] - A2[13] * A2[3] * A2[6]), F2 * (-A2[1] * A2[6] * A2[11] + A2[1] * A2[7] * A2[10] + A2[5] * A2[2] * A2[11] - A2[5] * A2[3] * A2[10] - A2[9] * A2[2] * A2[7] + A2[9] * A2[3] * A2[6]), F2 * (-A2[4] * A2[10] * A2[15] + A2[4] * A2[11] * A2[14] + A2[8] * A2[6] * A2[15] - A2[8] * A2[7] * A2[14] - A2[12] * A2[6] * A2[11] + A2[12] * A2[7] * A2[10]), F2 * (A2[0] * A2[10] * A2[15] - A2[0] * A2[11] * A2[14] - A2[8] * A2[2] * A2[15] + A2[8] * A2[3] * A2[14] + A2[12] * A2[2] * A2[11] - A2[12] * A2[3] * A2[10]), F2 * (-A2[0] * A2[6] * A2[15] + A2[0] * A2[7] * A2[14] + A2[4] * A2[2] * A2[15] - A2[4] * A2[3] * A2[14] - A2[12] * A2[2] * A2[7] + A2[12] * A2[3] * A2[6]), F2 * (A2[0] * A2[6] * A2[11] - A2[0] * A2[7] * A2[10] - A2[4] * A2[2] * A2[11] + A2[4] * A2[3] * A2[10] + A2[8] * A2[2] * A2[7] - A2[8] * A2[3] * A2[6]), F2 * (A2[4] * A2[9] * A2[15] - A2[4] * A2[11] * A2[13] - A2[8] * A2[5] * A2[15] + A2[8] * A2[7] * A2[13] + A2[12] * A2[5] * A2[11] - A2[12] * A2[7] * A2[9]), F2 * (-A2[0] * A2[9] * A2[15] + A2[0] * A2[11] * A2[13] + A2[8] * A2[1] * A2[15] - A2[8] * A2[3] * A2[13] - A2[12] * A2[1] * A2[11] + A2[12] * A2[3] * A2[9]), F2 * (A2[0] * A2[5] * A2[15] - A2[0] * A2[7] * A2[13] - A2[4] * A2[1] * A2[15] + A2[4] * A2[3] * A2[13] + A2[12] * A2[1] * A2[7] - A2[12] * A2[3] * A2[5]), F2 * (-A2[0] * A2[5] * A2[11] + A2[0] * A2[7] * A2[9] + A2[4] * A2[1] * A2[11] - A2[4] * A2[3] * A2[9] - A2[8] * A2[1] * A2[7] + A2[8] * A2[3] * A2[5]), F2 * (-A2[4] * A2[9] * A2[14] + A2[4] * A2[10] * A2[13] + A2[8] * A2[5] * A2[14] - A2[8] * A2[6] * A2[13] - A2[12] * A2[5] * A2[10] + A2[12] * A2[6] * A2[9]), F2 * (A2[0] * A2[9] * A2[14] - A2[0] * A2[10] * A2[13] - A2[8] * A2[1] * A2[14] + A2[8] * A2[2] * A2[13] + A2[12] * A2[1] * A2[10] - A2[12] * A2[2] * A2[9]), F2 * (-A2[0] * A2[5] * A2[14] + A2[0] * A2[6] * A2[13] + A2[4] * A2[1] * A2[14] - A2[4] * A2[2] * A2[13] - A2[12] * A2[1] * A2[6] + A2[12] * A2[2] * A2[5]), F2 * (A2[0] * A2[5] * A2[10] - A2[0] * A2[6] * A2[9] - A2[4] * A2[1] * A2[10] + A2[4] * A2[2] * A2[9] + A2[8] * A2[1] * A2[6] - A2[8] * A2[2] * A2[5]));
  }
  static Compose(A2, Q2, F2) {
    const U2 = Q2.x, l2 = Q2.y, t2 = Q2.z, d2 = Q2.w, n2 = U2 + U2, V2 = l2 + l2, Z2 = t2 + t2, e2 = U2 * n2, I2 = U2 * V2, R2 = U2 * Z2, a2 = l2 * V2, g2 = l2 * Z2, i2 = t2 * Z2, W2 = d2 * n2, c2 = d2 * V2, C2 = d2 * Z2, h2 = F2.x, s2 = F2.y, o2 = F2.z;
    return new _B((1 - (a2 + i2)) * h2, (I2 + C2) * h2, (R2 - c2) * h2, 0, (I2 - C2) * s2, (1 - (e2 + i2)) * s2, (g2 + W2) * s2, 0, (R2 + c2) * o2, (g2 - W2) * o2, (1 - (e2 + a2)) * o2, 0, A2.x, A2.y, A2.z, 1);
  }
  toString() {
    return `[${this.buffer.join(", ")}]`;
  }
};
var U = class extends Event {
  constructor(A2) {
    super("objectAdded"), this.object = A2;
  }
};
var l = class extends Event {
  constructor(A2) {
    super("objectRemoved"), this.object = A2;
  }
};
var t = class extends Event {
  constructor(A2) {
    super("objectChanged"), this.object = A2;
  }
};
var d = class extends F {
  constructor() {
    super(), this.positionChanged = false, this.rotationChanged = false, this.scaleChanged = false, this._position = new A(), this._rotation = new Q(), this._scale = new A(1, 1, 1), this._transform = new B(), this._changeEvent = new t(this), this.update = () => {
    }, this.applyPosition = () => {
      this.position = new A();
    }, this.applyRotation = () => {
      this.rotation = new Q();
    }, this.applyScale = () => {
      this.scale = new A(1, 1, 1);
    };
  }
  _updateMatrix() {
    this._transform = B.Compose(this._position, this._rotation, this._scale);
  }
  get position() {
    return this._position;
  }
  set position(A2) {
    this._position.equals(A2) || (this._position = A2, this.positionChanged = true, this._updateMatrix(), this.dispatchEvent(this._changeEvent));
  }
  get rotation() {
    return this._rotation;
  }
  set rotation(A2) {
    this._rotation.equals(A2) || (this._rotation = A2, this.rotationChanged = true, this._updateMatrix(), this.dispatchEvent(this._changeEvent));
  }
  get scale() {
    return this._scale;
  }
  set scale(A2) {
    this._scale.equals(A2) || (this._scale = A2, this.scaleChanged = true, this._updateMatrix(), this.dispatchEvent(this._changeEvent));
  }
  get forward() {
    let Q2 = new A(0, 0, 1);
    return Q2 = this.rotation.apply(Q2), Q2;
  }
  get transform() {
    return this._transform;
  }
};
var n = class _n {
  constructor(A2 = 1, Q2 = 0, F2 = 0, B2 = 0, U2 = 1, l2 = 0, t2 = 0, d2 = 0, n2 = 1) {
    this.buffer = [A2, Q2, F2, B2, U2, l2, t2, d2, n2];
  }
  equals(A2) {
    if (this.buffer.length !== A2.buffer.length)
      return false;
    if (this.buffer === A2.buffer)
      return true;
    for (let Q2 = 0; Q2 < this.buffer.length; Q2++)
      if (this.buffer[Q2] !== A2.buffer[Q2])
        return false;
    return true;
  }
  multiply(A2) {
    const Q2 = this.buffer, F2 = A2.buffer;
    return new _n(F2[0] * Q2[0] + F2[3] * Q2[1] + F2[6] * Q2[2], F2[1] * Q2[0] + F2[4] * Q2[1] + F2[7] * Q2[2], F2[2] * Q2[0] + F2[5] * Q2[1] + F2[8] * Q2[2], F2[0] * Q2[3] + F2[3] * Q2[4] + F2[6] * Q2[5], F2[1] * Q2[3] + F2[4] * Q2[4] + F2[7] * Q2[5], F2[2] * Q2[3] + F2[5] * Q2[4] + F2[8] * Q2[5], F2[0] * Q2[6] + F2[3] * Q2[7] + F2[6] * Q2[8], F2[1] * Q2[6] + F2[4] * Q2[7] + F2[7] * Q2[8], F2[2] * Q2[6] + F2[5] * Q2[7] + F2[8] * Q2[8]);
  }
  clone() {
    const A2 = this.buffer;
    return new _n(A2[0], A2[1], A2[2], A2[3], A2[4], A2[5], A2[6], A2[7], A2[8]);
  }
  static Eye(A2 = 1) {
    return new _n(A2, 0, 0, 0, A2, 0, 0, 0, A2);
  }
  static Diagonal(A2) {
    return new _n(A2.x, 0, 0, 0, A2.y, 0, 0, 0, A2.z);
  }
  static RotationFromQuaternion(A2) {
    return new _n(1 - 2 * A2.y * A2.y - 2 * A2.z * A2.z, 2 * A2.x * A2.y - 2 * A2.z * A2.w, 2 * A2.x * A2.z + 2 * A2.y * A2.w, 2 * A2.x * A2.y + 2 * A2.z * A2.w, 1 - 2 * A2.x * A2.x - 2 * A2.z * A2.z, 2 * A2.y * A2.z - 2 * A2.x * A2.w, 2 * A2.x * A2.z - 2 * A2.y * A2.w, 2 * A2.y * A2.z + 2 * A2.x * A2.w, 1 - 2 * A2.x * A2.x - 2 * A2.y * A2.y);
  }
  static RotationFromEuler(A2) {
    const Q2 = Math.cos(A2.x), F2 = Math.sin(A2.x), B2 = Math.cos(A2.y), U2 = Math.sin(A2.y), l2 = Math.cos(A2.z), t2 = Math.sin(A2.z);
    return new _n(...[B2 * l2 + U2 * F2 * t2, -B2 * t2 + U2 * F2 * l2, U2 * Q2, Q2 * t2, Q2 * l2, -F2, -U2 * l2 + B2 * F2 * t2, U2 * t2 + B2 * F2 * l2, B2 * Q2]);
  }
  toString() {
    return `[${this.buffer.join(", ")}]`;
  }
};
var V = class _V {
  constructor(A2 = 0, F2 = null, B2 = null, U2 = null, l2 = null) {
    this.changed = false, this.detached = false, this._vertexCount = A2, this._positions = F2 || new Float32Array(0), this._rotations = B2 || new Float32Array(0), this._scales = U2 || new Float32Array(0), this._colors = l2 || new Uint8Array(0), this._selection = new Uint8Array(this.vertexCount), this.translate = (A3) => {
      for (let Q2 = 0; Q2 < this.vertexCount; Q2++)
        this.positions[3 * Q2 + 0] += A3.x, this.positions[3 * Q2 + 1] += A3.y, this.positions[3 * Q2 + 2] += A3.z;
      this.changed = true;
    }, this.rotate = (A3) => {
      const F3 = n.RotationFromQuaternion(A3).buffer;
      for (let B3 = 0; B3 < this.vertexCount; B3++) {
        const U3 = this.positions[3 * B3 + 0], l3 = this.positions[3 * B3 + 1], t2 = this.positions[3 * B3 + 2];
        this.positions[3 * B3 + 0] = F3[0] * U3 + F3[1] * l3 + F3[2] * t2, this.positions[3 * B3 + 1] = F3[3] * U3 + F3[4] * l3 + F3[5] * t2, this.positions[3 * B3 + 2] = F3[6] * U3 + F3[7] * l3 + F3[8] * t2;
        const d2 = new Q(this.rotations[4 * B3 + 1], this.rotations[4 * B3 + 2], this.rotations[4 * B3 + 3], this.rotations[4 * B3 + 0]), n2 = A3.multiply(d2);
        this.rotations[4 * B3 + 1] = n2.x, this.rotations[4 * B3 + 2] = n2.y, this.rotations[4 * B3 + 3] = n2.z, this.rotations[4 * B3 + 0] = n2.w;
      }
      this.changed = true;
    }, this.scale = (A3) => {
      for (let Q2 = 0; Q2 < this.vertexCount; Q2++)
        this.positions[3 * Q2 + 0] *= A3.x, this.positions[3 * Q2 + 1] *= A3.y, this.positions[3 * Q2 + 2] *= A3.z, this.scales[3 * Q2 + 0] *= A3.x, this.scales[3 * Q2 + 1] *= A3.y, this.scales[3 * Q2 + 2] *= A3.z;
      this.changed = true;
    }, this.serialize = () => {
      const A3 = new Uint8Array(this.vertexCount * _V.RowLength), Q2 = new Float32Array(A3.buffer), F3 = new Uint8Array(A3.buffer);
      for (let A4 = 0; A4 < this.vertexCount; A4++)
        Q2[8 * A4 + 0] = this.positions[3 * A4 + 0], Q2[8 * A4 + 1] = this.positions[3 * A4 + 1], Q2[8 * A4 + 2] = this.positions[3 * A4 + 2], F3[32 * A4 + 24 + 0] = this.colors[4 * A4 + 0], F3[32 * A4 + 24 + 1] = this.colors[4 * A4 + 1], F3[32 * A4 + 24 + 2] = this.colors[4 * A4 + 2], F3[32 * A4 + 24 + 3] = this.colors[4 * A4 + 3], Q2[8 * A4 + 3 + 0] = this.scales[3 * A4 + 0], Q2[8 * A4 + 3 + 1] = this.scales[3 * A4 + 1], Q2[8 * A4 + 3 + 2] = this.scales[3 * A4 + 2], F3[32 * A4 + 28 + 0] = 128 * this.rotations[4 * A4 + 0] + 128 & 255, F3[32 * A4 + 28 + 1] = 128 * this.rotations[4 * A4 + 1] + 128 & 255, F3[32 * A4 + 28 + 2] = 128 * this.rotations[4 * A4 + 2] + 128 & 255, F3[32 * A4 + 28 + 3] = 128 * this.rotations[4 * A4 + 3] + 128 & 255;
      return A3;
    }, this.reattach = (A3, Q2, F3, B3, U3) => {
      console.assert(A3.byteLength === 3 * this.vertexCount * 4, `Expected ${3 * this.vertexCount * 4} bytes, got ${A3.byteLength} bytes`), this._positions = new Float32Array(A3), this._rotations = new Float32Array(Q2), this._scales = new Float32Array(F3), this._colors = new Uint8Array(B3), this._selection = new Uint8Array(U3), this.detached = false;
    };
  }
  static Deserialize(A2) {
    const Q2 = A2.length / _V.RowLength, F2 = new Float32Array(3 * Q2), B2 = new Float32Array(4 * Q2), U2 = new Float32Array(3 * Q2), l2 = new Uint8Array(4 * Q2), t2 = new Float32Array(A2.buffer), d2 = new Uint8Array(A2.buffer);
    for (let A3 = 0; A3 < Q2; A3++)
      F2[3 * A3 + 0] = t2[8 * A3 + 0], F2[3 * A3 + 1] = t2[8 * A3 + 1], F2[3 * A3 + 2] = t2[8 * A3 + 2], B2[4 * A3 + 0] = (d2[32 * A3 + 28 + 0] - 128) / 128, B2[4 * A3 + 1] = (d2[32 * A3 + 28 + 1] - 128) / 128, B2[4 * A3 + 2] = (d2[32 * A3 + 28 + 2] - 128) / 128, B2[4 * A3 + 3] = (d2[32 * A3 + 28 + 3] - 128) / 128, U2[3 * A3 + 0] = t2[8 * A3 + 3 + 0], U2[3 * A3 + 1] = t2[8 * A3 + 3 + 1], U2[3 * A3 + 2] = t2[8 * A3 + 3 + 2], l2[4 * A3 + 0] = d2[32 * A3 + 24 + 0], l2[4 * A3 + 1] = d2[32 * A3 + 24 + 1], l2[4 * A3 + 2] = d2[32 * A3 + 24 + 2], l2[4 * A3 + 3] = d2[32 * A3 + 24 + 3];
    return new _V(Q2, F2, B2, U2, l2);
  }
  get vertexCount() {
    return this._vertexCount;
  }
  get positions() {
    return this._positions;
  }
  get rotations() {
    return this._rotations;
  }
  get scales() {
    return this._scales;
  }
  get colors() {
    return this._colors;
  }
  get selection() {
    return this._selection;
  }
};
V.RowLength = 32;
var Z = class extends d {
  constructor(F2 = void 0) {
    super(), this.selectedChanged = false, this._selected = false, this._data = F2 || new V(), this.applyPosition = () => {
      this.data.translate(this.position), this.position = new A();
    }, this.applyRotation = () => {
      this.data.rotate(this.rotation), this.rotation = new Q();
    }, this.applyScale = () => {
      this.data.scale(this.scale), this.scale = new A(1, 1, 1);
    };
  }
  saveToFile(A2 = null) {
    if (!document)
      return;
    if (!A2) {
      const Q3 = /* @__PURE__ */ new Date();
      A2 = `splat-${Q3.getFullYear()}-${Q3.getMonth() + 1}-${Q3.getDate()}.splat`;
    }
    this.applyRotation(), this.applyScale(), this.applyPosition();
    const Q2 = this.data.serialize(), F2 = new Blob([Q2], { type: "application/octet-stream" }), B2 = document.createElement("a");
    B2.download = A2, B2.href = URL.createObjectURL(F2), B2.click();
  }
  get data() {
    return this._data;
  }
  get selected() {
    return this._selected;
  }
  set selected(A2) {
    this._selected !== A2 && (this._selected = A2, this.selectedChanged = true, this.dispatchEvent(this._changeEvent));
  }
};
var e = class {
  constructor() {
    this._fx = 1132, this._fy = 1132, this._near = 0.1, this._far = 100, this._width = 512, this._height = 512, this._projectionMatrix = new B(), this._viewMatrix = new B(), this._viewProj = new B(), this._updateProjectionMatrix = () => {
      this._projectionMatrix = new B(2 * this.fx / this.width, 0, 0, 0, 0, -2 * this.fy / this.height, 0, 0, 0, 0, this.far / (this.far - this.near), 1, 0, 0, -this.far * this.near / (this.far - this.near), 0), this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);
    }, this.update = (A2, Q2) => {
      const F2 = n.RotationFromQuaternion(Q2).buffer, U2 = A2.flat();
      this._viewMatrix = new B(F2[0], F2[1], F2[2], 0, F2[3], F2[4], F2[5], 0, F2[6], F2[7], F2[8], 0, -U2[0] * F2[0] - U2[1] * F2[3] - U2[2] * F2[6], -U2[0] * F2[1] - U2[1] * F2[4] - U2[2] * F2[7], -U2[0] * F2[2] - U2[1] * F2[5] - U2[2] * F2[8], 1), this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);
    }, this.setSize = (A2, Q2) => {
      this._width = A2, this._height = Q2, this._updateProjectionMatrix();
    };
  }
  get fx() {
    return this._fx;
  }
  set fx(A2) {
    this._fx !== A2 && (this._fx = A2, this._updateProjectionMatrix());
  }
  get fy() {
    return this._fy;
  }
  set fy(A2) {
    this._fy !== A2 && (this._fy = A2, this._updateProjectionMatrix());
  }
  get near() {
    return this._near;
  }
  set near(A2) {
    this._near !== A2 && (this._near = A2, this._updateProjectionMatrix());
  }
  get far() {
    return this._far;
  }
  set far(A2) {
    this._far !== A2 && (this._far = A2, this._updateProjectionMatrix());
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  get projectionMatrix() {
    return this._projectionMatrix;
  }
  get viewMatrix() {
    return this._viewMatrix;
  }
  get viewProj() {
    return this._viewProj;
  }
};
var I = class _I {
  constructor(A2 = 0, Q2 = 0, F2 = 0, B2 = 0) {
    this.x = A2, this.y = Q2, this.z = F2, this.w = B2;
  }
  equals(A2) {
    return this.x === A2.x && (this.y === A2.y && (this.z === A2.z && this.w === A2.w));
  }
  add(A2) {
    return "number" == typeof A2 ? new _I(this.x + A2, this.y + A2, this.z + A2, this.w + A2) : new _I(this.x + A2.x, this.y + A2.y, this.z + A2.z, this.w + A2.w);
  }
  subtract(A2) {
    return "number" == typeof A2 ? new _I(this.x - A2, this.y - A2, this.z - A2, this.w - A2) : new _I(this.x - A2.x, this.y - A2.y, this.z - A2.z, this.w - A2.w);
  }
  multiply(A2) {
    return "number" == typeof A2 ? new _I(this.x * A2, this.y * A2, this.z * A2, this.w * A2) : A2 instanceof _I ? new _I(this.x * A2.x, this.y * A2.y, this.z * A2.z, this.w * A2.w) : new _I(this.x * A2.buffer[0] + this.y * A2.buffer[4] + this.z * A2.buffer[8] + this.w * A2.buffer[12], this.x * A2.buffer[1] + this.y * A2.buffer[5] + this.z * A2.buffer[9] + this.w * A2.buffer[13], this.x * A2.buffer[2] + this.y * A2.buffer[6] + this.z * A2.buffer[10] + this.w * A2.buffer[14], this.x * A2.buffer[3] + this.y * A2.buffer[7] + this.z * A2.buffer[11] + this.w * A2.buffer[15]);
  }
  dot(A2) {
    return this.x * A2.x + this.y * A2.y + this.z * A2.z + this.w * A2.w;
  }
  lerp(A2, Q2) {
    return new _I(this.x + (A2.x - this.x) * Q2, this.y + (A2.y - this.y) * Q2, this.z + (A2.z - this.z) * Q2, this.w + (A2.w - this.w) * Q2);
  }
  magnitude() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  distanceTo(A2) {
    return Math.sqrt((this.x - A2.x) ** 2 + (this.y - A2.y) ** 2 + (this.z - A2.z) ** 2 + (this.w - A2.w) ** 2);
  }
  normalize() {
    const A2 = this.magnitude();
    return new _I(this.x / A2, this.y / A2, this.z / A2, this.w / A2);
  }
  flat() {
    return [this.x, this.y, this.z, this.w];
  }
  clone() {
    return new _I(this.x, this.y, this.z, this.w);
  }
  toString() {
    return `[${this.flat().join(", ")}]`;
  }
};
var R = class extends d {
  constructor(Q2 = void 0) {
    super(), this._data = Q2 || new e(), this._position = new A(0, 0, -5), this.update = () => {
      this.data.update(this.position, this.rotation);
    }, this.screenPointToRay = (Q3, F2) => {
      const B2 = new I(Q3, F2, -1, 1), U2 = this._data.projectionMatrix.invert(), l2 = B2.multiply(U2), t2 = this._data.viewMatrix.invert(), d2 = l2.multiply(t2);
      return new A(d2.x / d2.w, d2.y / d2.w, d2.z / d2.w).subtract(this.position).normalize();
    };
  }
  get data() {
    return this._data;
  }
};
var a = class extends F {
  constructor() {
    super(), this._objects = [], this.addObject = (A2) => {
      this.objects.push(A2), this.dispatchEvent(new U(A2));
    }, this.removeObject = (A2) => {
      const Q2 = this.objects.indexOf(A2);
      if (Q2 < 0)
        throw new Error("Object not found in scene");
      this.objects.splice(Q2, 1), this.dispatchEvent(new l(A2));
    }, this.findObject = (A2) => {
      for (const Q2 of this.objects)
        if (A2(Q2))
          return Q2;
    }, this.findObjectOfType = (A2) => {
      for (const Q2 of this.objects)
        if (Q2 instanceof A2)
          return Q2;
    }, this.reset = () => {
      const A2 = this.objects.slice();
      for (const Q2 of A2)
        this.removeObject(Q2);
    }, this.reset();
  }
  saveToFile(A2 = null) {
    if (!document)
      return;
    if (!A2) {
      const Q3 = /* @__PURE__ */ new Date();
      A2 = `scene-${Q3.getFullYear()}-${Q3.getMonth() + 1}-${Q3.getDate()}.splat`;
    }
    const Q2 = [];
    let F2 = 0;
    for (const A3 of this.objects)
      if (A3.applyRotation(), A3.applyScale(), A3.applyPosition(), A3 instanceof Z) {
        const B3 = A3.data.serialize();
        Q2.push(B3), F2 += A3.data.vertexCount;
      }
    const B2 = new Uint8Array(F2 * V.RowLength);
    let U2 = 0;
    for (const A3 of Q2)
      B2.set(A3, U2), U2 += A3.length;
    const l2 = new Blob([B2.buffer], { type: "application/octet-stream" }), t2 = document.createElement("a");
    t2.download = A2, t2.href = URL.createObjectURL(l2), t2.click();
  }
  get objects() {
    return this._objects;
  }
};
var g = class {
  static async LoadAsync(A2, Q2, F2, B2 = false) {
    const U2 = await fetch(A2, { mode: "cors", credentials: "omit", cache: B2 ? "force-cache" : "default" });
    if (200 != U2.status)
      throw new Error(U2.status + " Unable to load " + U2.url);
    const l2 = U2.body.getReader(), t2 = parseInt(U2.headers.get("content-length")), d2 = new Uint8Array(t2);
    let n2 = 0;
    for (; ; ) {
      const { done: A3, value: Q3 } = await l2.read();
      if (A3)
        break;
      d2.set(Q3, n2), n2 += Q3.length, null == F2 || F2(n2 / t2);
    }
    const e2 = V.Deserialize(d2), I2 = new Z(e2);
    return Q2.addObject(I2), I2;
  }
  static async LoadFromFileAsync(A2, Q2, F2) {
    const B2 = new FileReader();
    let U2 = new Z();
    return B2.onload = (A3) => {
      const F3 = new Uint8Array(A3.target.result), B3 = V.Deserialize(F3);
      U2 = new Z(B3), Q2.addObject(U2);
    }, B2.onprogress = (A3) => {
      null == F2 || F2(A3.loaded / A3.total);
    }, B2.readAsArrayBuffer(A2), await new Promise((A3) => {
      B2.onloadend = () => {
        A3();
      };
    }), U2;
  }
};
var i = class {
  static async LoadAsync(A2, Q2, F2, B2 = "", U2 = false) {
    const l2 = await fetch(A2, { mode: "cors", credentials: "omit", cache: U2 ? "force-cache" : "default" });
    if (200 != l2.status)
      throw new Error(l2.status + " Unable to load " + l2.url);
    const t2 = l2.body.getReader(), d2 = parseInt(l2.headers.get("content-length")), n2 = new Uint8Array(d2);
    let e2 = 0;
    for (; ; ) {
      const { done: A3, value: Q3 } = await t2.read();
      if (A3)
        break;
      n2.set(Q3, e2), e2 += Q3.length, null == F2 || F2(e2 / d2);
    }
    if (112 !== n2[0] || 108 !== n2[1] || 121 !== n2[2] || 10 !== n2[3])
      throw new Error("Invalid PLY file");
    const I2 = new Uint8Array(this._ParsePLYBuffer(n2.buffer, B2)), R2 = V.Deserialize(I2), a2 = new Z(R2);
    return Q2.addObject(a2), a2;
  }
  static async LoadFromFileAsync(A2, Q2, F2, B2 = "") {
    const U2 = new FileReader();
    let l2 = new Z();
    return U2.onload = (A3) => {
      const F3 = new Uint8Array(this._ParsePLYBuffer(A3.target.result, B2)), U3 = V.Deserialize(F3);
      l2 = new Z(U3), Q2.addObject(l2);
    }, U2.onprogress = (A3) => {
      null == F2 || F2(A3.loaded / A3.total);
    }, U2.readAsArrayBuffer(A2), await new Promise((A3) => {
      U2.onloadend = () => {
        A3();
      };
    }), l2;
  }
  static _ParsePLYBuffer(F2, B2) {
    const U2 = new Uint8Array(F2), l2 = new TextDecoder().decode(U2.slice(0, 10240)), t2 = "end_header\n", d2 = l2.indexOf(t2);
    if (d2 < 0)
      throw new Error("Unable to read .ply file header");
    const n2 = parseInt(/element vertex (\d+)\n/.exec(l2)[1]);
    let Z2 = 0;
    const e2 = { double: 8, int: 4, uint: 4, float: 4, short: 2, ushort: 2, uchar: 1 }, I2 = [];
    for (const A2 of l2.slice(0, d2).split("\n").filter((A3) => A3.startsWith("property "))) {
      const [Q2, F3, B3] = A2.split(" ");
      if (I2.push({ name: B3, type: F3, offset: Z2 }), !e2[F3])
        throw new Error(`Unsupported property type: ${F3}`);
      Z2 += e2[F3];
    }
    const R2 = new DataView(F2, d2 + 11), a2 = new ArrayBuffer(V.RowLength * n2), g2 = Q.FromEuler(new A(Math.PI / 2, 0, 0));
    for (let A2 = 0; A2 < n2; A2++) {
      const F3 = new Float32Array(a2, A2 * V.RowLength, 3), U3 = new Float32Array(a2, A2 * V.RowLength + 12, 3), l3 = new Uint8ClampedArray(a2, A2 * V.RowLength + 24, 4), t3 = new Uint8ClampedArray(a2, A2 * V.RowLength + 28, 4);
      let d3 = 255, n3 = 0, e3 = 0, i2 = 0;
      I2.forEach((Q2) => {
        let B3;
        switch (Q2.type) {
          case "float":
            B3 = R2.getFloat32(Q2.offset + A2 * Z2, true);
            break;
          case "int":
            B3 = R2.getInt32(Q2.offset + A2 * Z2, true);
            break;
          default:
            throw new Error(`Unsupported property type: ${Q2.type}`);
        }
        switch (Q2.name) {
          case "x":
            F3[0] = B3;
            break;
          case "y":
            F3[1] = B3;
            break;
          case "z":
            F3[2] = B3;
            break;
          case "scale_0":
            U3[0] = Math.exp(B3);
            break;
          case "scale_1":
            U3[1] = Math.exp(B3);
            break;
          case "scale_2":
            U3[2] = Math.exp(B3);
            break;
          case "red":
            l3[0] = B3;
            break;
          case "green":
            l3[1] = B3;
            break;
          case "blue":
            l3[2] = B3;
            break;
          case "f_dc_0":
            l3[0] = 255 * (0.5 + this.SH_C0 * B3);
            break;
          case "f_dc_1":
            l3[1] = 255 * (0.5 + this.SH_C0 * B3);
            break;
          case "f_dc_2":
            l3[2] = 255 * (0.5 + this.SH_C0 * B3);
            break;
          case "f_dc_3":
            l3[3] = 255 * (0.5 + this.SH_C0 * B3);
            break;
          case "opacity":
            l3[3] = 1 / (1 + Math.exp(-B3)) * 255;
            break;
          case "rot_0":
            d3 = B3;
            break;
          case "rot_1":
            n3 = B3;
            break;
          case "rot_2":
            e3 = B3;
            break;
          case "rot_3":
            i2 = B3;
        }
      });
      let W2 = new Q(n3, e3, i2, d3);
      switch (B2) {
        case "polycam": {
          const A3 = F3[1];
          F3[1] = -F3[2], F3[2] = A3, W2 = g2.multiply(W2);
          break;
        }
        case "":
          break;
        default:
          throw new Error(`Unsupported format: ${B2}`);
      }
      W2 = W2.normalize(), t3[0] = 128 * W2.w + 128, t3[1] = 128 * W2.x + 128, t3[2] = 128 * W2.y + 128, t3[3] = 128 * W2.z + 128;
    }
    return a2;
  }
};
function W(A2, Q2, F2) {
  var B2 = void 0 === Q2 ? null : Q2, U2 = function(A3, Q3) {
    var F3 = atob(A3);
    if (Q3) {
      for (var B3 = new Uint8Array(F3.length), U3 = 0, l3 = F3.length; U3 < l3; ++U3)
        B3[U3] = F3.charCodeAt(U3);
      return String.fromCharCode.apply(null, new Uint16Array(B3.buffer));
    }
    return F3;
  }(A2, void 0 !== F2 && F2), l2 = U2.indexOf("\n", 10) + 1, t2 = U2.substring(l2) + (B2 ? "//# sourceMappingURL=" + B2 : ""), d2 = new Blob([t2], { type: "application/javascript" });
  return URL.createObjectURL(d2);
}
function c(A2, Q2, F2) {
  var B2;
  return function(U2) {
    return B2 = B2 || W(A2, Q2, F2), new Worker(B2, U2);
  };
}
i.SH_C0 = 0.28209479177387814;
var C = c("", null, false);
var h = class {
  constructor(A2, Q2) {
    this._scene = null, this._camera = null, this._started = false, this._initialized = false, this._renderer = A2;
    const F2 = A2.gl;
    this._program = F2.createProgram(), this._passes = Q2 || [];
    const B2 = F2.createShader(F2.VERTEX_SHADER);
    F2.shaderSource(B2, this._getVertexSource()), F2.compileShader(B2), F2.getShaderParameter(B2, F2.COMPILE_STATUS) || console.error(F2.getShaderInfoLog(B2));
    const U2 = F2.createShader(F2.FRAGMENT_SHADER);
    F2.shaderSource(U2, this._getFragmentSource()), F2.compileShader(U2), F2.getShaderParameter(U2, F2.COMPILE_STATUS) || console.error(F2.getShaderInfoLog(U2)), F2.attachShader(this.program, B2), F2.attachShader(this.program, U2), F2.linkProgram(this.program), F2.getProgramParameter(this.program, F2.LINK_STATUS) || console.error(F2.getProgramInfoLog(this.program)), this.resize = () => {
      F2.useProgram(this._program), this._resize();
    }, this.initialize = () => {
      console.assert(!this._initialized, "ShaderProgram already initialized"), F2.useProgram(this._program), this._initialize();
      for (const A3 of this.passes)
        A3.initialize(this);
      this._initialized = true, this._started = true;
    }, this.render = (A3, Q3) => {
      F2.useProgram(this._program), this._scene === A3 && this._camera === Q3 || (this.dispose(), this._scene = A3, this._camera = Q3, this.initialize());
      for (const A4 of this.passes)
        A4.render();
      this._render();
    }, this.dispose = () => {
      if (this._initialized) {
        F2.useProgram(this._program);
        for (const A3 of this.passes)
          A3.dispose();
        this._dispose(), this._scene = null, this._camera = null, this._initialized = false;
      }
    };
  }
  get renderer() {
    return this._renderer;
  }
  get scene() {
    return this._scene;
  }
  get camera() {
    return this._camera;
  }
  get program() {
    return this._program;
  }
  get passes() {
    return this._passes;
  }
  get started() {
    return this._started;
  }
};
var s = c("", null, false);
var o = function(A2 = {}) {
  var Q2, F2, B2 = A2;
  B2.ready = new Promise((A3, B3) => {
    Q2 = A3, F2 = B3;
  });
  var U2, l2 = Object.assign({}, B2), t2 = "";
  t2 = 0 !== (t2 = self.location.href).indexOf("blob:") ? t2.substr(0, t2.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", U2 = (A3) => {
    var Q3 = new XMLHttpRequest();
    return Q3.open("GET", A3, false), Q3.responseType = "arraybuffer", Q3.send(null), new Uint8Array(Q3.response);
  }, B2.print || console.log.bind(console);
  var d2, n2, V2 = B2.printErr || console.error.bind(console);
  function Z2(A3) {
    if (X2(A3))
      return function(A4) {
        for (var Q3 = atob(A4), F3 = new Uint8Array(Q3.length), B3 = 0; B3 < Q3.length; ++B3)
          F3[B3] = Q3.charCodeAt(B3);
        return F3;
      }(A3.slice(G2.length));
  }
  Object.assign(B2, l2), l2 = null, B2.arguments && B2.arguments, B2.thisProgram && B2.thisProgram, B2.quit && B2.quit, B2.wasmBinary && (d2 = B2.wasmBinary), "object" != typeof WebAssembly && E2("no native wasm support detected");
  var e2, I2, R2, a2, g2, i2, W2, c2, C2 = false;
  function h2() {
    var A3 = n2.buffer;
    B2.HEAP8 = e2 = new Int8Array(A3), B2.HEAP16 = R2 = new Int16Array(A3), B2.HEAPU8 = I2 = new Uint8Array(A3), B2.HEAPU16 = a2 = new Uint16Array(A3), B2.HEAP32 = g2 = new Int32Array(A3), B2.HEAPU32 = i2 = new Uint32Array(A3), B2.HEAPF32 = W2 = new Float32Array(A3), B2.HEAPF64 = c2 = new Float64Array(A3);
  }
  var s2 = [], o2 = [], J2 = [], b2 = 0, r2 = null;
  function E2(A3) {
    var _a;
    (_a = B2.onAbort) == null ? void 0 : _a.call(B2, A3), V2(A3 = "Aborted(" + A3 + ")"), C2 = true, A3 += ". Build with -sASSERTIONS for more info.";
    var Q3 = new WebAssembly.RuntimeError(A3);
    throw F2(Q3), Q3;
  }
  var m2, N2, G2 = "data:application/octet-stream;base64,", X2 = (A3) => A3.startsWith(G2);
  function Y2(A3) {
    return Promise.resolve().then(() => function(A4) {
      if (A4 == m2 && d2)
        return new Uint8Array(d2);
      var Q3 = Z2(A4);
      if (Q3)
        return Q3;
      if (U2)
        return U2(A4);
      throw "both async and sync fetching of the wasm failed";
    }(A3));
  }
  function y2(A3, Q3, F3, B3) {
    return function(A4, Q4, F4) {
      return Y2(A4).then((A5) => WebAssembly.instantiate(A5, Q4)).then((A5) => A5).then(F4, (A5) => {
        V2(`failed to asynchronously prepare wasm: ${A5}`), E2(A5);
      });
    }(Q3, F3, B3);
  }
  X2(m2 = "data:application/octet-stream;base64,") || (N2 = m2, m2 = B2.locateFile ? B2.locateFile(N2, t2) : t2 + N2);
  var p = (A3) => {
    for (; A3.length > 0; )
      A3.shift()(B2);
  };
  B2.noExitRuntime;
  var S, k, u = (A3) => {
    for (var Q3 = "", F3 = A3; I2[F3]; )
      Q3 += S[I2[F3++]];
    return Q3;
  }, T = {}, D = {}, H = (A3) => {
    throw new k(A3);
  };
  function w(A3, Q3, F3 = {}) {
    if (!("argPackAdvance" in Q3))
      throw new TypeError("registerType registeredInstance requires argPackAdvance");
    return function(A4, Q4, F4 = {}) {
      var B3 = Q4.name;
      if (A4 || H(`type "${B3}" must have a positive integer typeid pointer`), D.hasOwnProperty(A4)) {
        if (F4.ignoreDuplicateRegistrations)
          return;
        H(`Cannot register type '${B3}' twice`);
      }
      if (D[A4] = Q4, T.hasOwnProperty(A4)) {
        var U3 = T[A4];
        delete T[A4], U3.forEach((A5) => A5());
      }
    }(A3, Q3, F3);
  }
  function x() {
    this.allocated = [void 0], this.freelist = [];
  }
  var f = new x(), M = () => {
    for (var A3 = 0, Q3 = f.reserved; Q3 < f.allocated.length; ++Q3)
      void 0 !== f.allocated[Q3] && ++A3;
    return A3;
  }, z = (A3) => (A3 || H("Cannot use deleted val. handle = " + A3), f.get(A3).value), v = (A3) => {
    switch (A3) {
      case void 0:
        return 1;
      case null:
        return 2;
      case true:
        return 3;
      case false:
        return 4;
      default:
        return f.allocate({ refcount: 1, value: A3 });
    }
  };
  function K(A3) {
    return this.fromWireType(g2[A3 >> 2]);
  }
  var j = (A3, Q3) => {
    switch (Q3) {
      case 4:
        return function(A4) {
          return this.fromWireType(W2[A4 >> 2]);
        };
      case 8:
        return function(A4) {
          return this.fromWireType(c2[A4 >> 3]);
        };
      default:
        throw new TypeError(`invalid float width (${Q3}): ${A3}`);
    }
  }, O = (A3, Q3, F3) => {
    switch (Q3) {
      case 1:
        return F3 ? (A4) => e2[A4 >> 0] : (A4) => I2[A4 >> 0];
      case 2:
        return F3 ? (A4) => R2[A4 >> 1] : (A4) => a2[A4 >> 1];
      case 4:
        return F3 ? (A4) => g2[A4 >> 2] : (A4) => i2[A4 >> 2];
      default:
        throw new TypeError(`invalid integer width (${Q3}): ${A3}`);
    }
  };
  function L(A3) {
    return this.fromWireType(i2[A3 >> 2]);
  }
  var P = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, _ = (A3, Q3) => A3 ? ((A4, Q4, F3) => {
    for (var B3 = Q4 + F3, U3 = Q4; A4[U3] && !(U3 >= B3); )
      ++U3;
    if (U3 - Q4 > 16 && A4.buffer && P)
      return P.decode(A4.subarray(Q4, U3));
    for (var l3 = ""; Q4 < U3; ) {
      var t3 = A4[Q4++];
      if (128 & t3) {
        var d3 = 63 & A4[Q4++];
        if (192 != (224 & t3)) {
          var n3 = 63 & A4[Q4++];
          if ((t3 = 224 == (240 & t3) ? (15 & t3) << 12 | d3 << 6 | n3 : (7 & t3) << 18 | d3 << 12 | n3 << 6 | 63 & A4[Q4++]) < 65536)
            l3 += String.fromCharCode(t3);
          else {
            var V3 = t3 - 65536;
            l3 += String.fromCharCode(55296 | V3 >> 10, 56320 | 1023 & V3);
          }
        } else
          l3 += String.fromCharCode((31 & t3) << 6 | d3);
      } else
        l3 += String.fromCharCode(t3);
    }
    return l3;
  })(I2, A3, Q3) : "", q = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, $ = (A3, Q3) => {
    for (var F3 = A3, B3 = F3 >> 1, U3 = B3 + Q3 / 2; !(B3 >= U3) && a2[B3]; )
      ++B3;
    if ((F3 = B3 << 1) - A3 > 32 && q)
      return q.decode(I2.subarray(A3, F3));
    for (var l3 = "", t3 = 0; !(t3 >= Q3 / 2); ++t3) {
      var d3 = R2[A3 + 2 * t3 >> 1];
      if (0 == d3)
        break;
      l3 += String.fromCharCode(d3);
    }
    return l3;
  }, AA = (A3, Q3, F3) => {
    if (F3 ?? (F3 = 2147483647), F3 < 2)
      return 0;
    for (var B3 = Q3, U3 = (F3 -= 2) < 2 * A3.length ? F3 / 2 : A3.length, l3 = 0; l3 < U3; ++l3) {
      var t3 = A3.charCodeAt(l3);
      R2[Q3 >> 1] = t3, Q3 += 2;
    }
    return R2[Q3 >> 1] = 0, Q3 - B3;
  }, QA = (A3) => 2 * A3.length, FA = (A3, Q3) => {
    for (var F3 = 0, B3 = ""; !(F3 >= Q3 / 4); ) {
      var U3 = g2[A3 + 4 * F3 >> 2];
      if (0 == U3)
        break;
      if (++F3, U3 >= 65536) {
        var l3 = U3 - 65536;
        B3 += String.fromCharCode(55296 | l3 >> 10, 56320 | 1023 & l3);
      } else
        B3 += String.fromCharCode(U3);
    }
    return B3;
  }, BA = (A3, Q3, F3) => {
    if (F3 ?? (F3 = 2147483647), F3 < 4)
      return 0;
    for (var B3 = Q3, U3 = B3 + F3 - 4, l3 = 0; l3 < A3.length; ++l3) {
      var t3 = A3.charCodeAt(l3);
      if (t3 >= 55296 && t3 <= 57343 && (t3 = 65536 + ((1023 & t3) << 10) | 1023 & A3.charCodeAt(++l3)), g2[Q3 >> 2] = t3, (Q3 += 4) + 4 > U3)
        break;
    }
    return g2[Q3 >> 2] = 0, Q3 - B3;
  }, UA = (A3) => {
    for (var Q3 = 0, F3 = 0; F3 < A3.length; ++F3) {
      var B3 = A3.charCodeAt(F3);
      B3 >= 55296 && B3 <= 57343 && ++F3, Q3 += 4;
    }
    return Q3;
  }, lA = (A3) => {
    var Q3 = (A3 - n2.buffer.byteLength + 65535) / 65536;
    try {
      return n2.grow(Q3), h2(), 1;
    } catch (A4) {
    }
  };
  (() => {
    for (var A3 = new Array(256), Q3 = 0; Q3 < 256; ++Q3)
      A3[Q3] = String.fromCharCode(Q3);
    S = A3;
  })(), k = B2.BindingError = class extends Error {
    constructor(A3) {
      super(A3), this.name = "BindingError";
    }
  }, B2.InternalError = class extends Error {
    constructor(A3) {
      super(A3), this.name = "InternalError";
    }
  }, Object.assign(x.prototype, { get(A3) {
    return this.allocated[A3];
  }, has(A3) {
    return void 0 !== this.allocated[A3];
  }, allocate(A3) {
    var Q3 = this.freelist.pop() || this.allocated.length;
    return this.allocated[Q3] = A3, Q3;
  }, free(A3) {
    this.allocated[A3] = void 0, this.freelist.push(A3);
  } }), f.allocated.push({ value: void 0 }, { value: null }, { value: true }, { value: false }), f.reserved = f.allocated.length, B2.count_emval_handles = M;
  var tA = { f: (A3, Q3, F3, B3, U3) => {
  }, i: (A3, Q3, F3, B3) => {
    w(A3, { name: Q3 = u(Q3), fromWireType: function(A4) {
      return !!A4;
    }, toWireType: function(A4, Q4) {
      return Q4 ? F3 : B3;
    }, argPackAdvance: 8, readValueFromPointer: function(A4) {
      return this.fromWireType(I2[A4]);
    }, destructorFunction: null });
  }, h: (A3, Q3) => {
    w(A3, { name: Q3 = u(Q3), fromWireType: (A4) => {
      var Q4 = z(A4);
      return ((A5) => {
        A5 >= f.reserved && 0 == --f.get(A5).refcount && f.free(A5);
      })(A4), Q4;
    }, toWireType: (A4, Q4) => v(Q4), argPackAdvance: 8, readValueFromPointer: K, destructorFunction: null });
  }, e: (A3, Q3, F3) => {
    w(A3, { name: Q3 = u(Q3), fromWireType: (A4) => A4, toWireType: (A4, Q4) => Q4, argPackAdvance: 8, readValueFromPointer: j(Q3, F3), destructorFunction: null });
  }, b: (A3, Q3, F3, B3, U3) => {
    Q3 = u(Q3);
    var l3 = (A4) => A4;
    if (0 === B3) {
      var t3 = 32 - 8 * F3;
      l3 = (A4) => A4 << t3 >>> t3;
    }
    var d3 = Q3.includes("unsigned");
    w(A3, { name: Q3, fromWireType: l3, toWireType: d3 ? function(A4, Q4) {
      return this.name, Q4 >>> 0;
    } : function(A4, Q4) {
      return this.name, Q4;
    }, argPackAdvance: 8, readValueFromPointer: O(Q3, F3, 0 !== B3), destructorFunction: null });
  }, a: (A3, Q3, F3) => {
    var B3 = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][Q3];
    function U3(A4) {
      var Q4 = i2[A4 >> 2], F4 = i2[A4 + 4 >> 2];
      return new B3(e2.buffer, F4, Q4);
    }
    w(A3, { name: F3 = u(F3), fromWireType: U3, argPackAdvance: 8, readValueFromPointer: U3 }, { ignoreDuplicateRegistrations: true });
  }, d: (A3, Q3) => {
    var F3 = "std::string" === (Q3 = u(Q3));
    w(A3, { name: Q3, fromWireType(A4) {
      var Q4, B3 = i2[A4 >> 2], U3 = A4 + 4;
      if (F3)
        for (var l3 = U3, t3 = 0; t3 <= B3; ++t3) {
          var d3 = U3 + t3;
          if (t3 == B3 || 0 == I2[d3]) {
            var n3 = _(l3, d3 - l3);
            void 0 === Q4 ? Q4 = n3 : (Q4 += String.fromCharCode(0), Q4 += n3), l3 = d3 + 1;
          }
        }
      else {
        var V3 = new Array(B3);
        for (t3 = 0; t3 < B3; ++t3)
          V3[t3] = String.fromCharCode(I2[U3 + t3]);
        Q4 = V3.join("");
      }
      return ZA(A4), Q4;
    }, toWireType(A4, Q4) {
      var B3;
      Q4 instanceof ArrayBuffer && (Q4 = new Uint8Array(Q4));
      var U3 = "string" == typeof Q4;
      U3 || Q4 instanceof Uint8Array || Q4 instanceof Uint8ClampedArray || Q4 instanceof Int8Array || H("Cannot pass non-string to std::string"), B3 = F3 && U3 ? ((A5) => {
        for (var Q5 = 0, F4 = 0; F4 < A5.length; ++F4) {
          var B4 = A5.charCodeAt(F4);
          B4 <= 127 ? Q5++ : B4 <= 2047 ? Q5 += 2 : B4 >= 55296 && B4 <= 57343 ? (Q5 += 4, ++F4) : Q5 += 3;
        }
        return Q5;
      })(Q4) : Q4.length;
      var l3 = VA(4 + B3 + 1), t3 = l3 + 4;
      if (i2[l3 >> 2] = B3, F3 && U3)
        ((A5, Q5, F4, B4) => {
          if (!(B4 > 0))
            return 0;
          for (var U4 = F4 + B4 - 1, l4 = 0; l4 < A5.length; ++l4) {
            var t4 = A5.charCodeAt(l4);
            if (t4 >= 55296 && t4 <= 57343 && (t4 = 65536 + ((1023 & t4) << 10) | 1023 & A5.charCodeAt(++l4)), t4 <= 127) {
              if (F4 >= U4)
                break;
              Q5[F4++] = t4;
            } else if (t4 <= 2047) {
              if (F4 + 1 >= U4)
                break;
              Q5[F4++] = 192 | t4 >> 6, Q5[F4++] = 128 | 63 & t4;
            } else if (t4 <= 65535) {
              if (F4 + 2 >= U4)
                break;
              Q5[F4++] = 224 | t4 >> 12, Q5[F4++] = 128 | t4 >> 6 & 63, Q5[F4++] = 128 | 63 & t4;
            } else {
              if (F4 + 3 >= U4)
                break;
              Q5[F4++] = 240 | t4 >> 18, Q5[F4++] = 128 | t4 >> 12 & 63, Q5[F4++] = 128 | t4 >> 6 & 63, Q5[F4++] = 128 | 63 & t4;
            }
          }
          Q5[F4] = 0;
        })(Q4, I2, t3, B3 + 1);
      else if (U3)
        for (var d3 = 0; d3 < B3; ++d3) {
          var n3 = Q4.charCodeAt(d3);
          n3 > 255 && (ZA(t3), H("String has UTF-16 code units that do not fit in 8 bits")), I2[t3 + d3] = n3;
        }
      else
        for (d3 = 0; d3 < B3; ++d3)
          I2[t3 + d3] = Q4[d3];
      return null !== A4 && A4.push(ZA, l3), l3;
    }, argPackAdvance: 8, readValueFromPointer: L, destructorFunction(A4) {
      ZA(A4);
    } });
  }, c: (A3, Q3, F3) => {
    var B3, U3, l3, t3, d3;
    F3 = u(F3), 2 === Q3 ? (B3 = $, U3 = AA, t3 = QA, l3 = () => a2, d3 = 1) : 4 === Q3 && (B3 = FA, U3 = BA, t3 = UA, l3 = () => i2, d3 = 2), w(A3, { name: F3, fromWireType: (A4) => {
      for (var F4, U4 = i2[A4 >> 2], t4 = l3(), n3 = A4 + 4, V3 = 0; V3 <= U4; ++V3) {
        var Z3 = A4 + 4 + V3 * Q3;
        if (V3 == U4 || 0 == t4[Z3 >> d3]) {
          var e3 = B3(n3, Z3 - n3);
          void 0 === F4 ? F4 = e3 : (F4 += String.fromCharCode(0), F4 += e3), n3 = Z3 + Q3;
        }
      }
      return ZA(A4), F4;
    }, toWireType: (A4, B4) => {
      "string" != typeof B4 && H(`Cannot pass non-string to C++ string type ${F3}`);
      var l4 = t3(B4), n3 = VA(4 + l4 + Q3);
      return i2[n3 >> 2] = l4 >> d3, U3(B4, n3 + 4, l4 + Q3), null !== A4 && A4.push(ZA, n3), n3;
    }, argPackAdvance: 8, readValueFromPointer: K, destructorFunction(A4) {
      ZA(A4);
    } });
  }, j: (A3, Q3) => {
    w(A3, { isVoid: true, name: Q3 = u(Q3), argPackAdvance: 0, fromWireType: () => {
    }, toWireType: (A4, Q4) => {
    } });
  }, g: (A3) => {
    var Q3 = I2.length, F3 = 2147483648;
    if ((A3 >>>= 0) > F3)
      return false;
    for (var B3, U3, l3 = 1; l3 <= 4; l3 *= 2) {
      var t3 = Q3 * (1 + 0.2 / l3);
      t3 = Math.min(t3, A3 + 100663296);
      var d3 = Math.min(F3, (B3 = Math.max(A3, t3)) + ((U3 = 65536) - B3 % U3) % U3);
      if (lA(d3))
        return true;
    }
    return false;
  } }, dA = function() {
    var _a;
    var A3 = { a: tA };
    function Q3(A4, Q4) {
      var F3;
      return dA = A4.exports, n2 = dA.k, h2(), F3 = dA.l, o2.unshift(F3), function(A5) {
        var _a2;
        if (b2--, (_a2 = B2.monitorRunDependencies) == null ? void 0 : _a2.call(B2, b2), 0 == b2 && r2) {
          var Q5 = r2;
          r2 = null, Q5();
        }
      }(), dA;
    }
    if (b2++, (_a = B2.monitorRunDependencies) == null ? void 0 : _a.call(B2, b2), B2.instantiateWasm)
      try {
        return B2.instantiateWasm(A3, Q3);
      } catch (A4) {
        V2(`Module.instantiateWasm callback failed with error: ${A4}`), F2(A4);
      }
    return y2(0, m2, A3, function(A4) {
      Q3(A4.instance);
    }).catch(F2), {};
  }();
  B2._pack = (A3, Q3, F3, U3, l3, t3, d3, n3, V3, Z3, e3) => (B2._pack = dA.m)(A3, Q3, F3, U3, l3, t3, d3, n3, V3, Z3, e3);
  var nA, VA = B2._malloc = (A3) => (VA = B2._malloc = dA.o)(A3), ZA = B2._free = (A3) => (ZA = B2._free = dA.p)(A3);
  function eA() {
    function A3() {
      nA || (nA = true, B2.calledRun = true, C2 || (p(o2), Q2(B2), B2.onRuntimeInitialized && B2.onRuntimeInitialized(), function() {
        if (B2.postRun)
          for ("function" == typeof B2.postRun && (B2.postRun = [B2.postRun]); B2.postRun.length; )
            A4 = B2.postRun.shift(), J2.unshift(A4);
        var A4;
        p(J2);
      }()));
    }
    b2 > 0 || (function() {
      if (B2.preRun)
        for ("function" == typeof B2.preRun && (B2.preRun = [B2.preRun]); B2.preRun.length; )
          A4 = B2.preRun.shift(), s2.unshift(A4);
      var A4;
      p(s2);
    }(), b2 > 0 || (B2.setStatus ? (B2.setStatus("Running..."), setTimeout(function() {
      setTimeout(function() {
        B2.setStatus("");
      }, 1), A3();
    }, 1)) : A3()));
  }
  if (r2 = function A3() {
    nA || eA(), nA || (r2 = A3);
  }, B2.preInit)
    for ("function" == typeof B2.preInit && (B2.preInit = [B2.preInit]); B2.preInit.length > 0; )
      B2.preInit.pop()();
  return eA(), A2.ready;
};
var J = class {
  constructor(A2) {
    this.dataChanged = false, this.transformsChanged = false, this._updating = /* @__PURE__ */ new Set(), this._dirty = /* @__PURE__ */ new Set();
    let Q2 = 0, F2 = 0;
    this._splatIndices = /* @__PURE__ */ new Map(), this._offsets = /* @__PURE__ */ new Map();
    const B2 = /* @__PURE__ */ new Map();
    for (const U3 of A2.objects)
      U3 instanceof Z && (this._splatIndices.set(U3, F2), this._offsets.set(U3, Q2), B2.set(Q2, U3), Q2 += U3.data.vertexCount, F2++);
    this._vertexCount = Q2, this._width = 2048, this._height = Math.ceil(2 * this.vertexCount / this.width), this._data = new Uint32Array(this.width * this.height * 4), this._transformsWidth = 5, this._transformsHeight = B2.size, this._transforms = new Float32Array(this._transformsWidth * this._transformsHeight * 4), this._transformIndicesWidth = 1024, this._transformIndicesHeight = Math.ceil(this.vertexCount / this._transformIndicesWidth), this._transformIndices = new Uint32Array(this._transformIndicesWidth * this._transformIndicesHeight), this._positions = new Float32Array(3 * this.vertexCount), this._rotations = new Float32Array(4 * this.vertexCount), this._scales = new Float32Array(3 * this.vertexCount), this._worker = new s();
    const U2 = (A3) => {
      const Q3 = this._splatIndices.get(A3);
      this._transforms.set(A3.transform.buffer, 20 * Q3), this._transforms[20 * Q3 + 16] = A3.selected ? 1 : 0, A3.positionChanged = false, A3.rotationChanged = false, A3.scaleChanged = false, A3.selectedChanged = false, this.transformsChanged = true;
    };
    let l2;
    this._worker.onmessage = (A3) => {
      if (A3.data.response) {
        const Q3 = A3.data.response, F3 = B2.get(Q3.offset);
        U2(F3);
        const l3 = this._splatIndices.get(F3);
        for (let A4 = 0; A4 < F3.data.vertexCount; A4++)
          this._transformIndices[Q3.offset + A4] = l3;
        this._data.set(Q3.data, 8 * Q3.offset), F3.data.reattach(Q3.positions, Q3.rotations, Q3.scales, Q3.colors, Q3.selection), this._positions.set(Q3.worldPositions, 3 * Q3.offset), this._rotations.set(Q3.worldRotations, 4 * Q3.offset), this._scales.set(Q3.worldScales, 3 * Q3.offset), this._updating.delete(F3), F3.selectedChanged = false, this.dataChanged = true;
      }
    }, async function() {
      l2 = await o();
    }();
    const t2 = (A3) => {
      if (!l2)
        return void async function() {
          for (; !l2; )
            await new Promise((A4) => setTimeout(A4, 0));
        }().then(() => {
          t2(A3);
        });
      U2(A3);
      const Q3 = l2._malloc(3 * A3.data.vertexCount * 4), F3 = l2._malloc(4 * A3.data.vertexCount * 4), B3 = l2._malloc(3 * A3.data.vertexCount * 4), d3 = l2._malloc(4 * A3.data.vertexCount), n2 = l2._malloc(A3.data.vertexCount), V2 = l2._malloc(8 * A3.data.vertexCount * 4), Z2 = l2._malloc(3 * A3.data.vertexCount * 4), e2 = l2._malloc(4 * A3.data.vertexCount * 4), I2 = l2._malloc(3 * A3.data.vertexCount * 4);
      l2.HEAPF32.set(A3.data.positions, Q3 / 4), l2.HEAPF32.set(A3.data.rotations, F3 / 4), l2.HEAPF32.set(A3.data.scales, B3 / 4), l2.HEAPU8.set(A3.data.colors, d3), l2.HEAPU8.set(A3.data.selection, n2), l2._pack(A3.selected, A3.data.vertexCount, Q3, F3, B3, d3, n2, V2, Z2, e2, I2);
      const R2 = new Uint32Array(l2.HEAPU32.buffer, V2, 8 * A3.data.vertexCount), a2 = new Float32Array(l2.HEAPF32.buffer, Z2, 3 * A3.data.vertexCount), g2 = new Float32Array(l2.HEAPF32.buffer, e2, 4 * A3.data.vertexCount), i2 = new Float32Array(l2.HEAPF32.buffer, I2, 3 * A3.data.vertexCount), W2 = this._splatIndices.get(A3), c2 = this._offsets.get(A3);
      for (let Q4 = 0; Q4 < A3.data.vertexCount; Q4++)
        this._transformIndices[c2 + Q4] = W2;
      this._data.set(R2, 8 * c2), this._positions.set(a2, 3 * c2), this._rotations.set(g2, 4 * c2), this._scales.set(i2, 3 * c2), l2._free(Q3), l2._free(F3), l2._free(B3), l2._free(d3), l2._free(n2), l2._free(V2), l2._free(Z2), l2._free(e2), l2._free(I2), this.dataChanged = true;
    }, d2 = (A3) => {
      if ((A3.positionChanged || A3.rotationChanged || A3.scaleChanged || A3.selectedChanged) && U2(A3), !A3.data.changed || A3.data.detached)
        return;
      const Q3 = { position: new Float32Array(A3.position.flat()), rotation: new Float32Array(A3.rotation.flat()), scale: new Float32Array(A3.scale.flat()), selected: A3.selected, vertexCount: A3.data.vertexCount, positions: A3.data.positions, rotations: A3.data.rotations, scales: A3.data.scales, colors: A3.data.colors, selection: A3.data.selection, offset: this._offsets.get(A3) };
      this._worker.postMessage({ splat: Q3 }, [Q3.position.buffer, Q3.rotation.buffer, Q3.scale.buffer, Q3.positions.buffer, Q3.rotations.buffer, Q3.scales.buffer, Q3.colors.buffer, Q3.selection.buffer]), this._updating.add(A3), A3.data.detached = true;
    };
    this.getSplat = (A3) => {
      let Q3 = null;
      for (const [F3, B3] of this._offsets) {
        if (!(A3 >= B3))
          break;
        Q3 = F3;
      }
      return Q3;
    }, this.getLocalIndex = (A3, Q3) => Q3 - this._offsets.get(A3), this.markDirty = (A3) => {
      this._dirty.add(A3);
    }, this.rebuild = () => {
      for (const A3 of this._dirty)
        d2(A3);
      this._dirty.clear();
    }, this.dispose = () => {
      this._worker.terminate();
    };
    for (const A3 of this._splatIndices.keys())
      t2(A3);
  }
  get offsets() {
    return this._offsets;
  }
  get data() {
    return this._data;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  get transforms() {
    return this._transforms;
  }
  get transformsWidth() {
    return this._transformsWidth;
  }
  get transformsHeight() {
    return this._transformsHeight;
  }
  get transformIndices() {
    return this._transformIndices;
  }
  get transformIndicesWidth() {
    return this._transformIndicesWidth;
  }
  get transformIndicesHeight() {
    return this._transformIndicesHeight;
  }
  get positions() {
    return this._positions;
  }
  get rotations() {
    return this._rotations;
  }
  get scales() {
    return this._scales;
  }
  get vertexCount() {
    return this._vertexCount;
  }
  get needsRebuild() {
    return this._dirty.size > 0;
  }
  get updating() {
    return this._updating.size > 0;
  }
};
var b = class {
  constructor(A2 = 0, Q2 = 0, F2 = 0, B2 = 255) {
    this.r = A2, this.g = Q2, this.b = F2, this.a = B2;
  }
  flat() {
    return [this.r, this.g, this.b, this.a];
  }
  flatNorm() {
    return [this.r / 255, this.g / 255, this.b / 255, this.a / 255];
  }
  toHexString() {
    return "#" + this.flat().map((A2) => A2.toString(16).padStart(2, "0")).join("");
  }
  toString() {
    return `[${this.flat().join(", ")}]`;
  }
};
var r = class extends h {
  constructor(A2, Q2) {
    super(A2, Q2), this._outlineThickness = 10, this._outlineColor = new b(255, 165, 0, 255), this._renderData = null, this._depthIndex = null, this._chunks = null, this._splatTexture = null;
    const F2 = A2.canvas, B2 = A2.gl;
    let U2, l2, t2, d2, n2, V2, e2, I2, R2, a2, g2, i2, W2, c2, h2, s2;
    this._resize = () => {
      this._camera && (this._camera.data.setSize(F2.width, F2.height), this._camera.update(), l2 = B2.getUniformLocation(this.program, "projection"), B2.uniformMatrix4fv(l2, false, this._camera.data.projectionMatrix.buffer), t2 = B2.getUniformLocation(this.program, "viewport"), B2.uniform2fv(t2, new Float32Array([F2.width, F2.height])));
    };
    const o2 = () => {
      U2 = new C(), U2.onmessage = (A3) => {
        if (A3.data.depthIndex) {
          const { depthIndex: Q3, chunks: F3 } = A3.data;
          this._depthIndex = Q3, this._chunks = F3, B2.bindBuffer(B2.ARRAY_BUFFER, s2), B2.bufferData(B2.ARRAY_BUFFER, Q3, B2.STATIC_DRAW);
        }
      };
    };
    this._initialize = () => {
      if (this._scene && this._camera) {
        this._resize(), this._scene.addEventListener("objectAdded", r2), this._scene.addEventListener("objectRemoved", E2);
        for (const A3 of this._scene.objects)
          A3 instanceof Z && A3.addEventListener("objectChanged", m2);
        this._renderData = new J(this._scene), d2 = B2.getUniformLocation(this.program, "focal"), B2.uniform2fv(d2, new Float32Array([this._camera.data.fx, this._camera.data.fy])), n2 = B2.getUniformLocation(this.program, "view"), B2.uniformMatrix4fv(n2, false, this._camera.data.viewMatrix.buffer), R2 = B2.getUniformLocation(this.program, "outlineThickness"), B2.uniform1f(R2, this.outlineThickness), a2 = B2.getUniformLocation(this.program, "outlineColor"), B2.uniform4fv(a2, new Float32Array(this.outlineColor.flatNorm())), this._splatTexture = B2.createTexture(), V2 = B2.getUniformLocation(this.program, "u_texture"), B2.uniform1i(V2, 0), W2 = B2.createTexture(), e2 = B2.getUniformLocation(this.program, "u_transforms"), B2.uniform1i(e2, 1), c2 = B2.createTexture(), I2 = B2.getUniformLocation(this.program, "u_transformIndices"), B2.uniform1i(I2, 2), h2 = B2.createBuffer(), B2.bindBuffer(B2.ARRAY_BUFFER, h2), B2.bufferData(B2.ARRAY_BUFFER, new Float32Array([-2, -2, 2, -2, 2, 2, -2, 2]), B2.STATIC_DRAW), g2 = B2.getAttribLocation(this.program, "position"), B2.enableVertexAttribArray(g2), B2.vertexAttribPointer(g2, 2, B2.FLOAT, false, 0, 0), s2 = B2.createBuffer(), i2 = B2.getAttribLocation(this.program, "index"), B2.enableVertexAttribArray(i2), B2.bindBuffer(B2.ARRAY_BUFFER, s2), o2();
      } else
        console.error("Cannot render without scene and camera");
    };
    const r2 = (A3) => {
      const Q3 = A3;
      Q3.object instanceof Z && Q3.object.addEventListener("objectChanged", m2), this.dispose();
    }, E2 = (A3) => {
      const Q3 = A3;
      Q3.object instanceof Z && Q3.object.removeEventListener("objectChanged", m2), this.dispose();
    }, m2 = (A3) => {
      const Q3 = A3;
      Q3.object instanceof Z && this._renderData && this._renderData.markDirty(Q3.object);
    };
    this._render = () => {
      if (this._scene && this._camera && this.renderData) {
        if (this._camera.update(), U2.postMessage({ viewProj: this._camera.data.viewProj }), this.renderData.needsRebuild && this.renderData.rebuild(), this.renderData.dataChanged || this.renderData.transformsChanged) {
          this.renderData.dataChanged && (B2.activeTexture(B2.TEXTURE0), B2.bindTexture(B2.TEXTURE_2D, this.splatTexture), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_WRAP_S, B2.CLAMP_TO_EDGE), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_WRAP_T, B2.CLAMP_TO_EDGE), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_MIN_FILTER, B2.NEAREST), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_MAG_FILTER, B2.NEAREST), B2.texImage2D(B2.TEXTURE_2D, 0, B2.RGBA32UI, this.renderData.width, this.renderData.height, 0, B2.RGBA_INTEGER, B2.UNSIGNED_INT, this.renderData.data)), this.renderData.transformsChanged && (B2.activeTexture(B2.TEXTURE1), B2.bindTexture(B2.TEXTURE_2D, W2), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_WRAP_S, B2.CLAMP_TO_EDGE), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_WRAP_T, B2.CLAMP_TO_EDGE), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_MIN_FILTER, B2.NEAREST), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_MAG_FILTER, B2.NEAREST), B2.texImage2D(B2.TEXTURE_2D, 0, B2.RGBA32F, this.renderData.transformsWidth, this.renderData.transformsHeight, 0, B2.RGBA, B2.FLOAT, this.renderData.transforms), B2.activeTexture(B2.TEXTURE2), B2.bindTexture(B2.TEXTURE_2D, c2), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_WRAP_S, B2.CLAMP_TO_EDGE), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_WRAP_T, B2.CLAMP_TO_EDGE), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_MIN_FILTER, B2.NEAREST), B2.texParameteri(B2.TEXTURE_2D, B2.TEXTURE_MAG_FILTER, B2.NEAREST), B2.texImage2D(B2.TEXTURE_2D, 0, B2.R32UI, this.renderData.transformIndicesWidth, this.renderData.transformIndicesHeight, 0, B2.RED_INTEGER, B2.UNSIGNED_INT, this.renderData.transformIndices));
          const A3 = new Float32Array(this.renderData.positions.slice().buffer), Q3 = new Float32Array(this.renderData.transforms.slice().buffer), F3 = new Uint32Array(this.renderData.transformIndices.slice().buffer);
          U2.postMessage({ sortData: { positions: A3, transforms: Q3, transformIndices: F3, vertexCount: this.renderData.vertexCount } }, [A3.buffer, Q3.buffer, F3.buffer]), this.renderData.dataChanged = false, this.renderData.transformsChanged = false;
        }
        B2.viewport(0, 0, F2.width, F2.height), B2.clearColor(0, 0, 0, 0), B2.clear(B2.COLOR_BUFFER_BIT), B2.disable(B2.DEPTH_TEST), B2.enable(B2.BLEND), B2.blendFuncSeparate(B2.ONE_MINUS_DST_ALPHA, B2.ONE, B2.ONE_MINUS_DST_ALPHA, B2.ONE), B2.blendEquationSeparate(B2.FUNC_ADD, B2.FUNC_ADD), B2.uniformMatrix4fv(l2, false, this._camera.data.projectionMatrix.buffer), B2.uniformMatrix4fv(n2, false, this._camera.data.viewMatrix.buffer), B2.bindBuffer(B2.ARRAY_BUFFER, h2), B2.vertexAttribPointer(g2, 2, B2.FLOAT, false, 0, 0), B2.bindBuffer(B2.ARRAY_BUFFER, s2), B2.vertexAttribIPointer(i2, 1, B2.INT, 0, 0), B2.vertexAttribDivisor(i2, 1), B2.drawArraysInstanced(B2.TRIANGLE_FAN, 0, 4, this.renderData.vertexCount);
      } else
        console.error("Cannot render without scene and camera");
    }, this._dispose = () => {
      if (this._scene && this._camera && this.renderData) {
        this._scene.removeEventListener("objectAdded", r2), this._scene.removeEventListener("objectRemoved", E2);
        for (const A3 of this._scene.objects)
          A3 instanceof Z && A3.removeEventListener("objectChanged", m2);
        U2.terminate(), this.renderData.dispose(), B2.deleteTexture(this.splatTexture), B2.deleteTexture(W2), B2.deleteTexture(c2), B2.deleteBuffer(s2), B2.deleteBuffer(h2);
      } else
        console.error("Cannot dispose without scene and camera");
    }, this._setOutlineThickness = (A3) => {
      this._outlineThickness = A3, this._initialized && B2.uniform1f(R2, A3);
    }, this._setOutlineColor = (A3) => {
      this._outlineColor = A3, this._initialized && B2.uniform4fv(a2, new Float32Array(A3.flatNorm()));
    };
  }
  get renderData() {
    return this._renderData;
  }
  get depthIndex() {
    return this._depthIndex;
  }
  get chunks() {
    return this._chunks;
  }
  get splatTexture() {
    return this._splatTexture;
  }
  get outlineThickness() {
    return this._outlineThickness;
  }
  set outlineThickness(A2) {
    this._setOutlineThickness(A2);
  }
  get outlineColor() {
    return this._outlineColor;
  }
  set outlineColor(A2) {
    this._setOutlineColor(A2);
  }
  _getVertexSource() {
    return "#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n";
  }
  _getFragmentSource() {
    return "#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n";
  }
};
var E = class {
  constructor(A2 = 1) {
    let Q2, F2, B2, U2, l2 = 0, t2 = false;
    this.initialize = (A3) => {
      if (!(A3 instanceof r))
        throw new Error("FadeInPass requires a RenderProgram");
      l2 = A3.started ? 1 : 0, t2 = true, Q2 = A3, F2 = A3.renderer.gl, B2 = F2.getUniformLocation(Q2.program, "useDepthFade"), F2.uniform1i(B2, 1), U2 = F2.getUniformLocation(Q2.program, "depthFade"), F2.uniform1f(U2, l2);
    }, this.render = () => {
      var d2;
      t2 && !(null === (d2 = Q2.renderData) || void 0 === d2 ? void 0 : d2.updating) && (F2.useProgram(Q2.program), l2 = Math.min(l2 + 0.01 * A2, 1), l2 >= 1 && (t2 = false, F2.uniform1i(B2, 0)), F2.uniform1f(U2, l2));
    };
  }
  dispose() {
  }
};
var m = class {
  constructor(A2 = null, Q2 = null) {
    this._backgroundColor = new b();
    const F2 = A2 || document.createElement("canvas");
    A2 || (F2.style.display = "block", F2.style.boxSizing = "border-box", F2.style.width = "100%", F2.style.height = "100%", F2.style.margin = "0", F2.style.padding = "0", document.body.appendChild(F2)), F2.style.background = this._backgroundColor.toHexString(), this._canvas = F2, this._gl = F2.getContext("webgl2", { antialias: false });
    const B2 = Q2 || [];
    Q2 || B2.push(new E()), this._renderProgram = new r(this, B2);
    const U2 = [this._renderProgram];
    this.resize = () => {
      const A3 = F2.clientWidth, Q3 = F2.clientHeight;
      F2.width === A3 && F2.height === Q3 || this.setSize(A3, Q3);
    }, this.setSize = (A3, Q3) => {
      F2.width = A3, F2.height = Q3, this._gl.viewport(0, 0, F2.width, F2.height);
      for (const A4 of U2)
        A4.resize();
    }, this.render = (A3, Q3) => {
      for (const F3 of U2)
        F3.render(A3, Q3);
    }, this.dispose = () => {
      for (const A3 of U2)
        A3.dispose();
    }, this.addProgram = (A3) => {
      U2.push(A3);
    }, this.removeProgram = (A3) => {
      const Q3 = U2.indexOf(A3);
      if (Q3 < 0)
        throw new Error("Program not found");
      U2.splice(Q3, 1);
    }, this.resize();
  }
  get canvas() {
    return this._canvas;
  }
  get gl() {
    return this._gl;
  }
  get renderProgram() {
    return this._renderProgram;
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(A2) {
    this._backgroundColor = A2, this._canvas.style.background = A2.toHexString();
  }
};
var N = class {
  constructor(F2, B2, U2 = 0.5, l2 = 0.5, t2 = 5, d2 = true, V2 = new A()) {
    this.minAngle = -90, this.maxAngle = 90, this.minZoom = 0.1, this.maxZoom = 30, this.orbitSpeed = 1, this.panSpeed = 1, this.zoomSpeed = 1, this.dampening = 0.12, this.setCameraTarget = () => {
    };
    let Z2 = V2.clone(), e2 = Z2.clone(), I2 = U2, R2 = l2, a2 = t2, g2 = false, i2 = false, W2 = 0, c2 = 0, C2 = 0;
    const h2 = {};
    let s2 = false;
    F2.addEventListener("objectChanged", () => {
      if (s2)
        return;
      const Q2 = F2.rotation.toEuler();
      I2 = -Q2.y, R2 = -Q2.x;
      const B3 = F2.position.x - a2 * Math.sin(I2) * Math.cos(R2), U3 = F2.position.y + a2 * Math.sin(R2), l3 = F2.position.z + a2 * Math.cos(I2) * Math.cos(R2);
      e2 = new A(B3, U3, l3);
    }), this.setCameraTarget = (Q2) => {
      const B3 = Q2.x - F2.position.x, U3 = Q2.y - F2.position.y, l3 = Q2.z - F2.position.z;
      a2 = Math.sqrt(B3 * B3 + U3 * U3 + l3 * l3), R2 = Math.atan2(U3, Math.sqrt(B3 * B3 + l3 * l3)), I2 = -Math.atan2(B3, l3), e2 = new A(Q2.x, Q2.y, Q2.z);
    };
    const o2 = () => 0.1 + 0.9 * (a2 - this.minZoom) / (this.maxZoom - this.minZoom), J2 = (A2) => {
      h2[A2.code] = true, "ArrowUp" === A2.code && (h2.KeyW = true), "ArrowDown" === A2.code && (h2.KeyS = true), "ArrowLeft" === A2.code && (h2.KeyA = true), "ArrowRight" === A2.code && (h2.KeyD = true);
    }, b2 = (A2) => {
      h2[A2.code] = false, "ArrowUp" === A2.code && (h2.KeyW = false), "ArrowDown" === A2.code && (h2.KeyS = false), "ArrowLeft" === A2.code && (h2.KeyA = false), "ArrowRight" === A2.code && (h2.KeyD = false);
    }, r2 = (A2) => {
      p(A2), g2 = true, i2 = 2 === A2.button, c2 = A2.clientX, C2 = A2.clientY, window.addEventListener("mouseup", E2);
    }, E2 = (A2) => {
      p(A2), g2 = false, i2 = false, window.removeEventListener("mouseup", E2);
    }, m2 = (Q2) => {
      if (p(Q2), !g2 || !F2)
        return;
      const B3 = Q2.clientX - c2, U3 = Q2.clientY - C2;
      if (i2) {
        const Q3 = o2(), l3 = -B3 * this.panSpeed * 0.01 * Q3, t3 = -U3 * this.panSpeed * 0.01 * Q3, d3 = n.RotationFromQuaternion(F2.rotation).buffer, V3 = new A(d3[0], d3[3], d3[6]), Z3 = new A(d3[1], d3[4], d3[7]);
        e2 = e2.add(V3.multiply(l3)), e2 = e2.add(Z3.multiply(t3));
      } else
        I2 -= B3 * this.orbitSpeed * 3e-3, R2 += U3 * this.orbitSpeed * 3e-3, R2 = Math.min(Math.max(R2, this.minAngle * Math.PI / 180), this.maxAngle * Math.PI / 180);
      c2 = Q2.clientX, C2 = Q2.clientY;
    }, N2 = (A2) => {
      p(A2);
      const Q2 = o2();
      a2 += A2.deltaY * this.zoomSpeed * 0.025 * Q2, a2 = Math.min(Math.max(a2, this.minZoom), this.maxZoom);
    }, G2 = (A2) => {
      if (p(A2), 1 === A2.touches.length)
        g2 = true, i2 = false, c2 = A2.touches[0].clientX, C2 = A2.touches[0].clientY, W2 = 0;
      else if (2 === A2.touches.length) {
        g2 = true, i2 = true, c2 = (A2.touches[0].clientX + A2.touches[1].clientX) / 2, C2 = (A2.touches[0].clientY + A2.touches[1].clientY) / 2;
        const Q2 = A2.touches[0].clientX - A2.touches[1].clientX, F3 = A2.touches[0].clientY - A2.touches[1].clientY;
        W2 = Math.sqrt(Q2 * Q2 + F3 * F3);
      }
    }, X2 = (A2) => {
      p(A2), g2 = false, i2 = false;
    }, Y2 = (Q2) => {
      if (p(Q2), g2 && F2)
        if (i2) {
          const B3 = o2(), U3 = Q2.touches[0].clientX - Q2.touches[1].clientX, l3 = Q2.touches[0].clientY - Q2.touches[1].clientY, t3 = Math.sqrt(U3 * U3 + l3 * l3);
          a2 += (W2 - t3) * this.zoomSpeed * 0.1 * B3, a2 = Math.min(Math.max(a2, this.minZoom), this.maxZoom), W2 = t3;
          const d3 = (Q2.touches[0].clientX + Q2.touches[1].clientX) / 2, V3 = (Q2.touches[0].clientY + Q2.touches[1].clientY) / 2, Z3 = d3 - c2, I3 = V3 - C2, R3 = n.RotationFromQuaternion(F2.rotation).buffer, g3 = new A(R3[0], R3[3], R3[6]), i3 = new A(R3[1], R3[4], R3[7]);
          e2 = e2.add(g3.multiply(-Z3 * this.panSpeed * 0.025 * B3)), e2 = e2.add(i3.multiply(-I3 * this.panSpeed * 0.025 * B3)), c2 = d3, C2 = V3;
        } else {
          const A2 = Q2.touches[0].clientX - c2, F3 = Q2.touches[0].clientY - C2;
          I2 -= A2 * this.orbitSpeed * 3e-3, R2 += F3 * this.orbitSpeed * 3e-3, R2 = Math.min(Math.max(R2, this.minAngle * Math.PI / 180), this.maxAngle * Math.PI / 180), c2 = Q2.touches[0].clientX, C2 = Q2.touches[0].clientY;
        }
    }, y2 = (A2, Q2, F3) => (1 - F3) * A2 + F3 * Q2;
    this.update = () => {
      s2 = true, U2 = y2(U2, I2, this.dampening), l2 = y2(l2, R2, this.dampening), t2 = y2(t2, a2, this.dampening), Z2 = Z2.lerp(e2, this.dampening);
      const B3 = Z2.x + t2 * Math.sin(U2) * Math.cos(l2), d3 = Z2.y - t2 * Math.sin(l2), V3 = Z2.z - t2 * Math.cos(U2) * Math.cos(l2);
      F2.position = new A(B3, d3, V3);
      const g3 = Z2.subtract(F2.position).normalize(), i3 = Math.asin(-g3.y), W3 = Math.atan2(g3.x, g3.z);
      F2.rotation = Q.FromEuler(new A(i3, W3, 0));
      const c3 = 0.025, C3 = 0.01, o3 = n.RotationFromQuaternion(F2.rotation).buffer, J3 = new A(-o3[2], -o3[5], -o3[8]), b3 = new A(o3[0], o3[3], o3[6]);
      h2.KeyS && (e2 = e2.add(J3.multiply(c3))), h2.KeyW && (e2 = e2.subtract(J3.multiply(c3))), h2.KeyA && (e2 = e2.subtract(b3.multiply(c3))), h2.KeyD && (e2 = e2.add(b3.multiply(c3))), h2.KeyE && (I2 += C3), h2.KeyQ && (I2 -= C3), h2.KeyR && (R2 += C3), h2.KeyF && (R2 -= C3), s2 = false;
    };
    const p = (A2) => {
      A2.preventDefault(), A2.stopPropagation();
    };
    this.dispose = () => {
      B2.removeEventListener("dragenter", p), B2.removeEventListener("dragover", p), B2.removeEventListener("dragleave", p), B2.removeEventListener("contextmenu", p), B2.removeEventListener("mousedown", r2), B2.removeEventListener("mousemove", m2), B2.removeEventListener("wheel", N2), B2.removeEventListener("touchstart", G2), B2.removeEventListener("touchend", X2), B2.removeEventListener("touchmove", Y2), d2 && (window.removeEventListener("keydown", J2), window.removeEventListener("keyup", b2));
    }, d2 && (window.addEventListener("keydown", J2), window.addEventListener("keyup", b2)), B2.addEventListener("dragenter", p), B2.addEventListener("dragover", p), B2.addEventListener("dragleave", p), B2.addEventListener("contextmenu", p), B2.addEventListener("mousedown", r2), B2.addEventListener("mousemove", m2), B2.addEventListener("wheel", N2), B2.addEventListener("touchstart", G2), B2.addEventListener("touchend", X2), B2.addEventListener("touchmove", Y2), this.update();
  }
};
var G = class {
  constructor(A2, Q2) {
    this.normal = A2, this.point = Q2;
  }
  intersect(A2, Q2) {
    const F2 = this.normal.dot(Q2);
    if (Math.abs(F2) < 1e-4)
      return null;
    const B2 = this.normal.dot(this.point.subtract(A2)) / F2;
    return B2 < 0 ? null : A2.add(Q2.multiply(B2));
  }
};
var X = class {
  initialize(A2) {
  }
  render() {
  }
  dispose() {
  }
};
var Y = function(A2 = {}) {
  var Q2, F2, B2 = A2;
  B2.ready = new Promise((A3, B3) => {
    Q2 = A3, F2 = B3;
  });
  var U2 = Object.assign({}, B2), l2 = "";
  "undefined" != typeof document && document.currentScript && (l2 = document.currentScript.src), l2 = 0 !== l2.indexOf("blob:") ? l2.substr(0, l2.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", B2.print || console.log.bind(console);
  var t2, d2, n2 = B2.printErr || console.error.bind(console);
  function V2(A3) {
    if (G2(A3))
      return function(A4) {
        for (var Q3 = atob(A4), F3 = new Uint8Array(Q3.length), B3 = 0; B3 < Q3.length; ++B3)
          F3[B3] = Q3.charCodeAt(B3);
        return F3;
      }(A3.slice(N2.length));
  }
  Object.assign(B2, U2), U2 = null, B2.arguments && B2.arguments, B2.thisProgram && B2.thisProgram, B2.quit && B2.quit, B2.wasmBinary && (t2 = B2.wasmBinary), "object" != typeof WebAssembly && r2("no native wasm support detected");
  var Z2, e2, I2, R2, a2, g2, i2, W2, c2 = false;
  function C2() {
    var A3 = d2.buffer;
    B2.HEAP8 = Z2 = new Int8Array(A3), B2.HEAP16 = I2 = new Int16Array(A3), B2.HEAPU8 = e2 = new Uint8Array(A3), B2.HEAPU16 = R2 = new Uint16Array(A3), B2.HEAP32 = a2 = new Int32Array(A3), B2.HEAPU32 = g2 = new Uint32Array(A3), B2.HEAPF32 = i2 = new Float32Array(A3), B2.HEAPF64 = W2 = new Float64Array(A3);
  }
  var h2 = [], s2 = [], o2 = [], J2 = 0, b2 = null;
  function r2(A3) {
    var _a;
    (_a = B2.onAbort) == null ? void 0 : _a.call(B2, A3), n2(A3 = "Aborted(" + A3 + ")"), c2 = true, A3 += ". Build with -sASSERTIONS for more info.";
    var Q3 = new WebAssembly.RuntimeError(A3);
    throw F2(Q3), Q3;
  }
  var E2, m2, N2 = "data:application/octet-stream;base64,", G2 = (A3) => A3.startsWith(N2);
  function X2(A3) {
    return Promise.resolve().then(() => function(A4) {
      if (A4 == E2 && t2)
        return new Uint8Array(t2);
      var Q3 = V2(A4);
      if (Q3)
        return Q3;
      throw "both async and sync fetching of the wasm failed";
    }(A3));
  }
  function Y2(A3, Q3, F3, B3) {
    return function(A4, Q4, F4) {
      return X2(A4).then((A5) => WebAssembly.instantiate(A5, Q4)).then((A5) => A5).then(F4, (A5) => {
        n2(`failed to asynchronously prepare wasm: ${A5}`), r2(A5);
      });
    }(Q3, F3, B3);
  }
  G2(E2 = "data:application/octet-stream;base64,") || (m2 = E2, E2 = B2.locateFile ? B2.locateFile(m2, l2) : l2 + m2);
  var y2 = (A3) => {
    for (; A3.length > 0; )
      A3.shift()(B2);
  };
  B2.noExitRuntime;
  var p, S, k = (A3) => {
    for (var Q3 = "", F3 = A3; e2[F3]; )
      Q3 += p[e2[F3++]];
    return Q3;
  }, u = {}, T = {}, D = (A3) => {
    throw new S(A3);
  };
  function H(A3, Q3, F3 = {}) {
    if (!("argPackAdvance" in Q3))
      throw new TypeError("registerType registeredInstance requires argPackAdvance");
    return function(A4, Q4, F4 = {}) {
      var B3 = Q4.name;
      if (A4 || D(`type "${B3}" must have a positive integer typeid pointer`), T.hasOwnProperty(A4)) {
        if (F4.ignoreDuplicateRegistrations)
          return;
        D(`Cannot register type '${B3}' twice`);
      }
      if (T[A4] = Q4, u.hasOwnProperty(A4)) {
        var U3 = u[A4];
        delete u[A4], U3.forEach((A5) => A5());
      }
    }(A3, Q3, F3);
  }
  function w() {
    this.allocated = [void 0], this.freelist = [];
  }
  var x = new w(), f = () => {
    for (var A3 = 0, Q3 = x.reserved; Q3 < x.allocated.length; ++Q3)
      void 0 !== x.allocated[Q3] && ++A3;
    return A3;
  }, M = (A3) => (A3 || D("Cannot use deleted val. handle = " + A3), x.get(A3).value), z = (A3) => {
    switch (A3) {
      case void 0:
        return 1;
      case null:
        return 2;
      case true:
        return 3;
      case false:
        return 4;
      default:
        return x.allocate({ refcount: 1, value: A3 });
    }
  };
  function v(A3) {
    return this.fromWireType(a2[A3 >> 2]);
  }
  var K = (A3, Q3) => {
    switch (Q3) {
      case 4:
        return function(A4) {
          return this.fromWireType(i2[A4 >> 2]);
        };
      case 8:
        return function(A4) {
          return this.fromWireType(W2[A4 >> 3]);
        };
      default:
        throw new TypeError(`invalid float width (${Q3}): ${A3}`);
    }
  }, j = (A3, Q3, F3) => {
    switch (Q3) {
      case 1:
        return F3 ? (A4) => Z2[A4 >> 0] : (A4) => e2[A4 >> 0];
      case 2:
        return F3 ? (A4) => I2[A4 >> 1] : (A4) => R2[A4 >> 1];
      case 4:
        return F3 ? (A4) => a2[A4 >> 2] : (A4) => g2[A4 >> 2];
      default:
        throw new TypeError(`invalid integer width (${Q3}): ${A3}`);
    }
  };
  function O(A3) {
    return this.fromWireType(g2[A3 >> 2]);
  }
  var L = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, P = (A3, Q3) => A3 ? ((A4, Q4, F3) => {
    for (var B3 = Q4 + F3, U3 = Q4; A4[U3] && !(U3 >= B3); )
      ++U3;
    if (U3 - Q4 > 16 && A4.buffer && L)
      return L.decode(A4.subarray(Q4, U3));
    for (var l3 = ""; Q4 < U3; ) {
      var t3 = A4[Q4++];
      if (128 & t3) {
        var d3 = 63 & A4[Q4++];
        if (192 != (224 & t3)) {
          var n3 = 63 & A4[Q4++];
          if ((t3 = 224 == (240 & t3) ? (15 & t3) << 12 | d3 << 6 | n3 : (7 & t3) << 18 | d3 << 12 | n3 << 6 | 63 & A4[Q4++]) < 65536)
            l3 += String.fromCharCode(t3);
          else {
            var V3 = t3 - 65536;
            l3 += String.fromCharCode(55296 | V3 >> 10, 56320 | 1023 & V3);
          }
        } else
          l3 += String.fromCharCode((31 & t3) << 6 | d3);
      } else
        l3 += String.fromCharCode(t3);
    }
    return l3;
  })(e2, A3, Q3) : "", _ = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, q = (A3, Q3) => {
    for (var F3 = A3, B3 = F3 >> 1, U3 = B3 + Q3 / 2; !(B3 >= U3) && R2[B3]; )
      ++B3;
    if ((F3 = B3 << 1) - A3 > 32 && _)
      return _.decode(e2.subarray(A3, F3));
    for (var l3 = "", t3 = 0; !(t3 >= Q3 / 2); ++t3) {
      var d3 = I2[A3 + 2 * t3 >> 1];
      if (0 == d3)
        break;
      l3 += String.fromCharCode(d3);
    }
    return l3;
  }, $ = (A3, Q3, F3) => {
    if (F3 ?? (F3 = 2147483647), F3 < 2)
      return 0;
    for (var B3 = Q3, U3 = (F3 -= 2) < 2 * A3.length ? F3 / 2 : A3.length, l3 = 0; l3 < U3; ++l3) {
      var t3 = A3.charCodeAt(l3);
      I2[Q3 >> 1] = t3, Q3 += 2;
    }
    return I2[Q3 >> 1] = 0, Q3 - B3;
  }, AA = (A3) => 2 * A3.length, QA = (A3, Q3) => {
    for (var F3 = 0, B3 = ""; !(F3 >= Q3 / 4); ) {
      var U3 = a2[A3 + 4 * F3 >> 2];
      if (0 == U3)
        break;
      if (++F3, U3 >= 65536) {
        var l3 = U3 - 65536;
        B3 += String.fromCharCode(55296 | l3 >> 10, 56320 | 1023 & l3);
      } else
        B3 += String.fromCharCode(U3);
    }
    return B3;
  }, FA = (A3, Q3, F3) => {
    if (F3 ?? (F3 = 2147483647), F3 < 4)
      return 0;
    for (var B3 = Q3, U3 = B3 + F3 - 4, l3 = 0; l3 < A3.length; ++l3) {
      var t3 = A3.charCodeAt(l3);
      if (t3 >= 55296 && t3 <= 57343 && (t3 = 65536 + ((1023 & t3) << 10) | 1023 & A3.charCodeAt(++l3)), a2[Q3 >> 2] = t3, (Q3 += 4) + 4 > U3)
        break;
    }
    return a2[Q3 >> 2] = 0, Q3 - B3;
  }, BA = (A3) => {
    for (var Q3 = 0, F3 = 0; F3 < A3.length; ++F3) {
      var B3 = A3.charCodeAt(F3);
      B3 >= 55296 && B3 <= 57343 && ++F3, Q3 += 4;
    }
    return Q3;
  }, UA = (A3) => {
    var Q3 = (A3 - d2.buffer.byteLength + 65535) / 65536;
    try {
      return d2.grow(Q3), C2(), 1;
    } catch (A4) {
    }
  };
  (() => {
    for (var A3 = new Array(256), Q3 = 0; Q3 < 256; ++Q3)
      A3[Q3] = String.fromCharCode(Q3);
    p = A3;
  })(), S = B2.BindingError = class extends Error {
    constructor(A3) {
      super(A3), this.name = "BindingError";
    }
  }, B2.InternalError = class extends Error {
    constructor(A3) {
      super(A3), this.name = "InternalError";
    }
  }, Object.assign(w.prototype, { get(A3) {
    return this.allocated[A3];
  }, has(A3) {
    return void 0 !== this.allocated[A3];
  }, allocate(A3) {
    var Q3 = this.freelist.pop() || this.allocated.length;
    return this.allocated[Q3] = A3, Q3;
  }, free(A3) {
    this.allocated[A3] = void 0, this.freelist.push(A3);
  } }), x.allocated.push({ value: void 0 }, { value: null }, { value: true }, { value: false }), x.reserved = x.allocated.length, B2.count_emval_handles = f;
  var lA = { f: (A3, Q3, F3, B3, U3) => {
  }, i: (A3, Q3, F3, B3) => {
    H(A3, { name: Q3 = k(Q3), fromWireType: function(A4) {
      return !!A4;
    }, toWireType: function(A4, Q4) {
      return Q4 ? F3 : B3;
    }, argPackAdvance: 8, readValueFromPointer: function(A4) {
      return this.fromWireType(e2[A4]);
    }, destructorFunction: null });
  }, h: (A3, Q3) => {
    H(A3, { name: Q3 = k(Q3), fromWireType: (A4) => {
      var Q4 = M(A4);
      return ((A5) => {
        A5 >= x.reserved && 0 == --x.get(A5).refcount && x.free(A5);
      })(A4), Q4;
    }, toWireType: (A4, Q4) => z(Q4), argPackAdvance: 8, readValueFromPointer: v, destructorFunction: null });
  }, e: (A3, Q3, F3) => {
    H(A3, { name: Q3 = k(Q3), fromWireType: (A4) => A4, toWireType: (A4, Q4) => Q4, argPackAdvance: 8, readValueFromPointer: K(Q3, F3), destructorFunction: null });
  }, b: (A3, Q3, F3, B3, U3) => {
    Q3 = k(Q3);
    var l3 = (A4) => A4;
    if (0 === B3) {
      var t3 = 32 - 8 * F3;
      l3 = (A4) => A4 << t3 >>> t3;
    }
    var d3 = Q3.includes("unsigned");
    H(A3, { name: Q3, fromWireType: l3, toWireType: d3 ? function(A4, Q4) {
      return this.name, Q4 >>> 0;
    } : function(A4, Q4) {
      return this.name, Q4;
    }, argPackAdvance: 8, readValueFromPointer: j(Q3, F3, 0 !== B3), destructorFunction: null });
  }, a: (A3, Q3, F3) => {
    var B3 = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][Q3];
    function U3(A4) {
      var Q4 = g2[A4 >> 2], F4 = g2[A4 + 4 >> 2];
      return new B3(Z2.buffer, F4, Q4);
    }
    H(A3, { name: F3 = k(F3), fromWireType: U3, argPackAdvance: 8, readValueFromPointer: U3 }, { ignoreDuplicateRegistrations: true });
  }, d: (A3, Q3) => {
    var F3 = "std::string" === (Q3 = k(Q3));
    H(A3, { name: Q3, fromWireType(A4) {
      var Q4, B3 = g2[A4 >> 2], U3 = A4 + 4;
      if (F3)
        for (var l3 = U3, t3 = 0; t3 <= B3; ++t3) {
          var d3 = U3 + t3;
          if (t3 == B3 || 0 == e2[d3]) {
            var n3 = P(l3, d3 - l3);
            void 0 === Q4 ? Q4 = n3 : (Q4 += String.fromCharCode(0), Q4 += n3), l3 = d3 + 1;
          }
        }
      else {
        var V3 = new Array(B3);
        for (t3 = 0; t3 < B3; ++t3)
          V3[t3] = String.fromCharCode(e2[U3 + t3]);
        Q4 = V3.join("");
      }
      return VA(A4), Q4;
    }, toWireType(A4, Q4) {
      var B3;
      Q4 instanceof ArrayBuffer && (Q4 = new Uint8Array(Q4));
      var U3 = "string" == typeof Q4;
      U3 || Q4 instanceof Uint8Array || Q4 instanceof Uint8ClampedArray || Q4 instanceof Int8Array || D("Cannot pass non-string to std::string"), B3 = F3 && U3 ? ((A5) => {
        for (var Q5 = 0, F4 = 0; F4 < A5.length; ++F4) {
          var B4 = A5.charCodeAt(F4);
          B4 <= 127 ? Q5++ : B4 <= 2047 ? Q5 += 2 : B4 >= 55296 && B4 <= 57343 ? (Q5 += 4, ++F4) : Q5 += 3;
        }
        return Q5;
      })(Q4) : Q4.length;
      var l3 = nA(4 + B3 + 1), t3 = l3 + 4;
      if (g2[l3 >> 2] = B3, F3 && U3)
        ((A5, Q5, F4, B4) => {
          if (!(B4 > 0))
            return 0;
          for (var U4 = F4 + B4 - 1, l4 = 0; l4 < A5.length; ++l4) {
            var t4 = A5.charCodeAt(l4);
            if (t4 >= 55296 && t4 <= 57343 && (t4 = 65536 + ((1023 & t4) << 10) | 1023 & A5.charCodeAt(++l4)), t4 <= 127) {
              if (F4 >= U4)
                break;
              Q5[F4++] = t4;
            } else if (t4 <= 2047) {
              if (F4 + 1 >= U4)
                break;
              Q5[F4++] = 192 | t4 >> 6, Q5[F4++] = 128 | 63 & t4;
            } else if (t4 <= 65535) {
              if (F4 + 2 >= U4)
                break;
              Q5[F4++] = 224 | t4 >> 12, Q5[F4++] = 128 | t4 >> 6 & 63, Q5[F4++] = 128 | 63 & t4;
            } else {
              if (F4 + 3 >= U4)
                break;
              Q5[F4++] = 240 | t4 >> 18, Q5[F4++] = 128 | t4 >> 12 & 63, Q5[F4++] = 128 | t4 >> 6 & 63, Q5[F4++] = 128 | 63 & t4;
            }
          }
          Q5[F4] = 0;
        })(Q4, e2, t3, B3 + 1);
      else if (U3)
        for (var d3 = 0; d3 < B3; ++d3) {
          var n3 = Q4.charCodeAt(d3);
          n3 > 255 && (VA(t3), D("String has UTF-16 code units that do not fit in 8 bits")), e2[t3 + d3] = n3;
        }
      else
        for (d3 = 0; d3 < B3; ++d3)
          e2[t3 + d3] = Q4[d3];
      return null !== A4 && A4.push(VA, l3), l3;
    }, argPackAdvance: 8, readValueFromPointer: O, destructorFunction(A4) {
      VA(A4);
    } });
  }, c: (A3, Q3, F3) => {
    var B3, U3, l3, t3, d3;
    F3 = k(F3), 2 === Q3 ? (B3 = q, U3 = $, t3 = AA, l3 = () => R2, d3 = 1) : 4 === Q3 && (B3 = QA, U3 = FA, t3 = BA, l3 = () => g2, d3 = 2), H(A3, { name: F3, fromWireType: (A4) => {
      for (var F4, U4 = g2[A4 >> 2], t4 = l3(), n3 = A4 + 4, V3 = 0; V3 <= U4; ++V3) {
        var Z3 = A4 + 4 + V3 * Q3;
        if (V3 == U4 || 0 == t4[Z3 >> d3]) {
          var e3 = B3(n3, Z3 - n3);
          void 0 === F4 ? F4 = e3 : (F4 += String.fromCharCode(0), F4 += e3), n3 = Z3 + Q3;
        }
      }
      return VA(A4), F4;
    }, toWireType: (A4, B4) => {
      "string" != typeof B4 && D(`Cannot pass non-string to C++ string type ${F3}`);
      var l4 = t3(B4), n3 = nA(4 + l4 + Q3);
      return g2[n3 >> 2] = l4 >> d3, U3(B4, n3 + 4, l4 + Q3), null !== A4 && A4.push(VA, n3), n3;
    }, argPackAdvance: 8, readValueFromPointer: v, destructorFunction(A4) {
      VA(A4);
    } });
  }, j: (A3, Q3) => {
    H(A3, { isVoid: true, name: Q3 = k(Q3), argPackAdvance: 0, fromWireType: () => {
    }, toWireType: (A4, Q4) => {
    } });
  }, g: (A3) => {
    var Q3 = e2.length, F3 = 2147483648;
    if ((A3 >>>= 0) > F3)
      return false;
    for (var B3, U3, l3 = 1; l3 <= 4; l3 *= 2) {
      var t3 = Q3 * (1 + 0.2 / l3);
      t3 = Math.min(t3, A3 + 100663296);
      var d3 = Math.min(F3, (B3 = Math.max(A3, t3)) + ((U3 = 65536) - B3 % U3) % U3);
      if (UA(d3))
        return true;
    }
    return false;
  } }, tA = function() {
    var _a;
    var A3 = { a: lA };
    function Q3(A4, Q4) {
      var F3;
      return tA = A4.exports, d2 = tA.k, C2(), F3 = tA.l, s2.unshift(F3), function(A5) {
        var _a2;
        if (J2--, (_a2 = B2.monitorRunDependencies) == null ? void 0 : _a2.call(B2, J2), 0 == J2 && b2) {
          var Q5 = b2;
          b2 = null, Q5();
        }
      }(), tA;
    }
    if (J2++, (_a = B2.monitorRunDependencies) == null ? void 0 : _a.call(B2, J2), B2.instantiateWasm)
      try {
        return B2.instantiateWasm(A3, Q3);
      } catch (A4) {
        n2(`Module.instantiateWasm callback failed with error: ${A4}`), F2(A4);
      }
    return Y2(0, E2, A3, function(A4) {
      Q3(A4.instance);
    }).catch(F2), {};
  }();
  B2._evaluate = (A3, Q3, F3, U3, l3, t3, d3, n3, V3, Z3, e3, I3, R3) => (B2._evaluate = tA.m)(A3, Q3, F3, U3, l3, t3, d3, n3, V3, Z3, e3, I3, R3);
  var dA, nA = B2._malloc = (A3) => (nA = B2._malloc = tA.o)(A3), VA = B2._free = (A3) => (VA = B2._free = tA.p)(A3);
  function ZA() {
    function A3() {
      dA || (dA = true, B2.calledRun = true, c2 || (y2(s2), Q2(B2), B2.onRuntimeInitialized && B2.onRuntimeInitialized(), function() {
        if (B2.postRun)
          for ("function" == typeof B2.postRun && (B2.postRun = [B2.postRun]); B2.postRun.length; )
            A4 = B2.postRun.shift(), o2.unshift(A4);
        var A4;
        y2(o2);
      }()));
    }
    J2 > 0 || (function() {
      if (B2.preRun)
        for ("function" == typeof B2.preRun && (B2.preRun = [B2.preRun]); B2.preRun.length; )
          A4 = B2.preRun.shift(), h2.unshift(A4);
      var A4;
      y2(h2);
    }(), J2 > 0 || (B2.setStatus ? (B2.setStatus("Running..."), setTimeout(function() {
      setTimeout(function() {
        B2.setStatus("");
      }, 1), A3();
    }, 1)) : A3()));
  }
  if (b2 = function A3() {
    dA || ZA(), dA || (b2 = A3);
  }, B2.preInit)
    for ("function" == typeof B2.preInit && (B2.preInit = [B2.preInit]); B2.preInit.length > 0; )
      B2.preInit.pop()();
  return ZA(), A2.ready;
};
var y = class {
  constructor(A2) {
    let Q2;
    (async () => {
      Q2 = await Y();
    })();
    let F2, B2, U2, l2, t2, d2, n2, V2, Z2, e2, I2, R2 = 0, a2 = 0;
    this.testPoint = (g2, i2) => {
      if (!Q2)
        throw new Error("Wasm module not loaded");
      if (!A2.camera)
        throw new Error("Camera not set");
      if (!A2.renderData || !A2.depthIndex || !A2.chunks)
        throw new Error("Render data not set");
      const W2 = A2.renderData, c2 = A2.depthIndex, C2 = A2.chunks, h2 = Math.pow(2, Math.ceil(Math.log2(W2.vertexCount)));
      var s2;
      (s2 = h2) > R2 && (R2 > 0 && (Q2._free(F2), Q2._free(U2), Q2._free(l2), Q2._free(t2), Q2._free(d2), Q2._free(n2), Q2._free(V2), Q2._free(Z2), Q2._free(e2), Q2._free(I2)), R2 = s2, F2 = Q2._malloc(64), U2 = Q2._malloc(4 * R2), l2 = Q2._malloc(3 * R2 * 4), t2 = Q2._malloc(4 * R2 * 4), d2 = Q2._malloc(3 * R2 * 4), n2 = Q2._malloc(4 * R2), V2 = Q2._malloc(R2), Z2 = Q2._malloc(12), e2 = Q2._malloc(12), I2 = Q2._malloc(4));
      const o2 = Math.pow(2, Math.ceil(Math.log2(W2.transforms.length / 20)));
      var J2;
      (J2 = o2) > a2 && (a2 > 0 && Q2._free(B2), a2 = J2, B2 = Q2._malloc(20 * a2 * 4));
      const b2 = (g2 + 1) / 2, r2 = (i2 + 1) / 2, E2 = Math.floor(15 * b2) + 15 * Math.floor(15 * r2), m2 = A2.camera, N2 = m2.screenPointToRay(g2, i2);
      Q2.HEAPF32.set(m2.data.viewMatrix.buffer, F2 / 4), Q2.HEAPU32.set(W2.transformIndices, U2 / 4), Q2.HEAPF32.set(W2.positions, l2 / 4), Q2.HEAPF32.set(W2.rotations, t2 / 4), Q2.HEAPF32.set(W2.scales, d2 / 4), Q2.HEAPU32.set(c2, n2 / 4), Q2.HEAPU8.set(C2, V2), Q2.HEAPF32.set(m2.position.flat(), Z2 / 4), Q2.HEAPF32.set(N2.flat(), e2 / 4), Q2.HEAPF32.set(W2.transforms, B2 / 4), Q2._evaluate(F2, B2, U2, l2, t2, d2, n2, V2, W2.vertexCount, E2, Z2, e2, I2);
      const G2 = Q2.HEAPU32[I2 / 4];
      if (4294967295 !== G2) {
        return W2.getSplat(G2);
      }
      return null;
    };
  }
};
export {
  R as Camera,
  e as CameraData,
  b as Color32,
  E as FadeInPass,
  y as IntersectionTester,
  g as Loader,
  n as Matrix3,
  B as Matrix4,
  d as Object3D,
  N as OrbitControls,
  i as PLYLoader,
  G as Plane,
  Q as Quaternion,
  J as RenderData,
  r as RenderProgram,
  a as Scene,
  X as ShaderPass,
  h as ShaderProgram,
  Z as Splat,
  V as SplatData,
  A as Vector3,
  I as Vector4,
  m as WebGLRenderer
};
//# sourceMappingURL=gsplat.js.map
