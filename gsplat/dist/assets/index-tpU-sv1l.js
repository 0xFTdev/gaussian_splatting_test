(function(){const F=document.createElement("link").relList;if(F&&F.supports&&F.supports("modulepreload"))return;for(const Q of document.querySelectorAll('link[rel="modulepreload"]'))U(Q);new MutationObserver(Q=>{for(const A of Q)if(A.type==="childList")for(const d of A.addedNodes)d.tagName==="LINK"&&d.rel==="modulepreload"&&U(d)}).observe(document,{childList:!0,subtree:!0});function l(Q){const A={};return Q.integrity&&(A.integrity=Q.integrity),Q.referrerPolicy&&(A.referrerPolicy=Q.referrerPolicy),Q.crossOrigin==="use-credentials"?A.credentials="include":Q.crossOrigin==="anonymous"?A.credentials="omit":A.credentials="same-origin",A}function U(Q){if(Q.ep)return;Q.ep=!0;const A=l(Q);fetch(Q.href,A)}})();class g{constructor(F=0,l=0,U=0){this.x=F,this.y=l,this.z=U}equals(F){return this.x===F.x&&this.y===F.y&&this.z===F.z}add(F){return typeof F=="number"?new g(this.x+F,this.y+F,this.z+F):new g(this.x+F.x,this.y+F.y,this.z+F.z)}subtract(F){return typeof F=="number"?new g(this.x-F,this.y-F,this.z-F):new g(this.x-F.x,this.y-F.y,this.z-F.z)}multiply(F){return typeof F=="number"?new g(this.x*F,this.y*F,this.z*F):F instanceof g?new g(this.x*F.x,this.y*F.y,this.z*F.z):new g(this.x*F.buffer[0]+this.y*F.buffer[4]+this.z*F.buffer[8]+F.buffer[12],this.x*F.buffer[1]+this.y*F.buffer[5]+this.z*F.buffer[9]+F.buffer[13],this.x*F.buffer[2]+this.y*F.buffer[6]+this.z*F.buffer[10]+F.buffer[14])}cross(F){const l=this.y*F.z-this.z*F.y,U=this.z*F.x-this.x*F.z,Q=this.x*F.y-this.y*F.x;return new g(l,U,Q)}dot(F){return this.x*F.x+this.y*F.y+this.z*F.z}lerp(F,l){return new g(this.x+(F.x-this.x)*l,this.y+(F.y-this.y)*l,this.z+(F.z-this.z)*l)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(F){return Math.sqrt((this.x-F.x)**2+(this.y-F.y)**2+(this.z-F.z)**2)}normalize(){const F=this.magnitude();return new g(this.x/F,this.y/F,this.z/F)}flat(){return[this.x,this.y,this.z]}clone(){return new g(this.x,this.y,this.z)}toString(){return`[${this.flat().join(", ")}]`}static One(F=1){return new g(F,F,F)}}class P{constructor(F=0,l=0,U=0,Q=1){this.x=F,this.y=l,this.z=U,this.w=Q}equals(F){return this.x===F.x&&this.y===F.y&&this.z===F.z&&this.w===F.w}normalize(){const F=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new P(this.x/F,this.y/F,this.z/F,this.w/F)}multiply(F){const l=this.w,U=this.x,Q=this.y,A=this.z,d=F.w,V=F.x,t=F.y,B=F.z;return new P(l*V+U*d+Q*B-A*t,l*t-U*B+Q*d+A*V,l*B+U*t-Q*V+A*d,l*d-U*V-Q*t-A*B)}inverse(){const F=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new P(-this.x/F,-this.y/F,-this.z/F,this.w/F)}apply(F){const l=new P(F.x,F.y,F.z,0),U=new P(-this.x,-this.y,-this.z,this.w),Q=this.multiply(l).multiply(U);return new g(Q.x,Q.y,Q.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new P(this.x,this.y,this.z,this.w)}static FromEuler(F){const l=F.x/2,U=F.y/2,Q=F.z/2,A=Math.cos(U),d=Math.sin(U),V=Math.cos(l),t=Math.sin(l),B=Math.cos(Q),e=Math.sin(Q);return new P(A*t*B+d*V*e,d*V*B-A*t*e,A*V*e-d*t*B,A*V*B+d*t*e)}toEuler(){const F=2*(this.w*this.x+this.y*this.z),l=1-2*(this.x*this.x+this.y*this.y),U=Math.atan2(F,l);let Q;const A=2*(this.w*this.y-this.z*this.x);Q=Math.abs(A)>=1?Math.sign(A)*Math.PI/2:Math.asin(A);const d=2*(this.w*this.z+this.x*this.y),V=1-2*(this.y*this.y+this.z*this.z),t=Math.atan2(d,V);return new g(U,Q,t)}static FromMatrix3(F){const l=F.buffer,U=l[0]+l[4]+l[8];let Q,A,d,V;if(U>0){const t=.5/Math.sqrt(U+1);V=.25/t,Q=(l[7]-l[5])*t,A=(l[2]-l[6])*t,d=(l[3]-l[1])*t}else if(l[0]>l[4]&&l[0]>l[8]){const t=2*Math.sqrt(1+l[0]-l[4]-l[8]);V=(l[7]-l[5])/t,Q=.25*t,A=(l[1]+l[3])/t,d=(l[2]+l[6])/t}else if(l[4]>l[8]){const t=2*Math.sqrt(1+l[4]-l[0]-l[8]);V=(l[2]-l[6])/t,Q=(l[1]+l[3])/t,A=.25*t,d=(l[5]+l[7])/t}else{const t=2*Math.sqrt(1+l[8]-l[0]-l[4]);V=(l[3]-l[1])/t,Q=(l[2]+l[6])/t,A=(l[5]+l[7])/t,d=.25*t}return new P(Q,A,d,V)}static FromAxisAngle(F,l){const U=l/2,Q=Math.sin(U),A=Math.cos(U);return new P(F.x*Q,F.y*Q,F.z*Q,A)}toString(){return`[${this.flat().join(", ")}]`}}class oF{constructor(){const F=new Map;this.addEventListener=(l,U)=>{F.has(l)||F.set(l,new Set),F.get(l).add(U)},this.removeEventListener=(l,U)=>{F.has(l)&&F.get(l).delete(U)},this.hasEventListener=(l,U)=>!!F.has(l)&&F.get(l).has(U),this.dispatchEvent=l=>{if(F.has(l.type))for(const U of F.get(l.type))U(l)}}}class QF{constructor(F=1,l=0,U=0,Q=0,A=0,d=1,V=0,t=0,B=0,e=0,s=1,h=0,m=0,p=0,S=0,o=1){this.buffer=[F,l,U,Q,A,d,V,t,B,e,s,h,m,p,S,o]}equals(F){if(this.buffer.length!==F.buffer.length)return!1;if(this.buffer===F.buffer)return!0;for(let l=0;l<this.buffer.length;l++)if(this.buffer[l]!==F.buffer[l])return!1;return!0}multiply(F){const l=this.buffer,U=F.buffer;return new QF(U[0]*l[0]+U[1]*l[4]+U[2]*l[8]+U[3]*l[12],U[0]*l[1]+U[1]*l[5]+U[2]*l[9]+U[3]*l[13],U[0]*l[2]+U[1]*l[6]+U[2]*l[10]+U[3]*l[14],U[0]*l[3]+U[1]*l[7]+U[2]*l[11]+U[3]*l[15],U[4]*l[0]+U[5]*l[4]+U[6]*l[8]+U[7]*l[12],U[4]*l[1]+U[5]*l[5]+U[6]*l[9]+U[7]*l[13],U[4]*l[2]+U[5]*l[6]+U[6]*l[10]+U[7]*l[14],U[4]*l[3]+U[5]*l[7]+U[6]*l[11]+U[7]*l[15],U[8]*l[0]+U[9]*l[4]+U[10]*l[8]+U[11]*l[12],U[8]*l[1]+U[9]*l[5]+U[10]*l[9]+U[11]*l[13],U[8]*l[2]+U[9]*l[6]+U[10]*l[10]+U[11]*l[14],U[8]*l[3]+U[9]*l[7]+U[10]*l[11]+U[11]*l[15],U[12]*l[0]+U[13]*l[4]+U[14]*l[8]+U[15]*l[12],U[12]*l[1]+U[13]*l[5]+U[14]*l[9]+U[15]*l[13],U[12]*l[2]+U[13]*l[6]+U[14]*l[10]+U[15]*l[14],U[12]*l[3]+U[13]*l[7]+U[14]*l[11]+U[15]*l[15])}clone(){const F=this.buffer;return new QF(F[0],F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8],F[9],F[10],F[11],F[12],F[13],F[14],F[15])}determinant(){const F=this.buffer;return F[12]*F[9]*F[6]*F[3]-F[8]*F[13]*F[6]*F[3]-F[12]*F[5]*F[10]*F[3]+F[4]*F[13]*F[10]*F[3]+F[8]*F[5]*F[14]*F[3]-F[4]*F[9]*F[14]*F[3]-F[12]*F[9]*F[2]*F[7]+F[8]*F[13]*F[2]*F[7]+F[12]*F[1]*F[10]*F[7]-F[0]*F[13]*F[10]*F[7]-F[8]*F[1]*F[14]*F[7]+F[0]*F[9]*F[14]*F[7]+F[12]*F[5]*F[2]*F[11]-F[4]*F[13]*F[2]*F[11]-F[12]*F[1]*F[6]*F[11]+F[0]*F[13]*F[6]*F[11]+F[4]*F[1]*F[14]*F[11]-F[0]*F[5]*F[14]*F[11]-F[8]*F[5]*F[2]*F[15]+F[4]*F[9]*F[2]*F[15]+F[8]*F[1]*F[6]*F[15]-F[0]*F[9]*F[6]*F[15]-F[4]*F[1]*F[10]*F[15]+F[0]*F[5]*F[10]*F[15]}invert(){const F=this.buffer,l=this.determinant();if(l===0)throw new Error("Matrix is not invertible.");const U=1/l;return new QF(U*(F[5]*F[10]*F[15]-F[5]*F[11]*F[14]-F[9]*F[6]*F[15]+F[9]*F[7]*F[14]+F[13]*F[6]*F[11]-F[13]*F[7]*F[10]),U*(-F[1]*F[10]*F[15]+F[1]*F[11]*F[14]+F[9]*F[2]*F[15]-F[9]*F[3]*F[14]-F[13]*F[2]*F[11]+F[13]*F[3]*F[10]),U*(F[1]*F[6]*F[15]-F[1]*F[7]*F[14]-F[5]*F[2]*F[15]+F[5]*F[3]*F[14]+F[13]*F[2]*F[7]-F[13]*F[3]*F[6]),U*(-F[1]*F[6]*F[11]+F[1]*F[7]*F[10]+F[5]*F[2]*F[11]-F[5]*F[3]*F[10]-F[9]*F[2]*F[7]+F[9]*F[3]*F[6]),U*(-F[4]*F[10]*F[15]+F[4]*F[11]*F[14]+F[8]*F[6]*F[15]-F[8]*F[7]*F[14]-F[12]*F[6]*F[11]+F[12]*F[7]*F[10]),U*(F[0]*F[10]*F[15]-F[0]*F[11]*F[14]-F[8]*F[2]*F[15]+F[8]*F[3]*F[14]+F[12]*F[2]*F[11]-F[12]*F[3]*F[10]),U*(-F[0]*F[6]*F[15]+F[0]*F[7]*F[14]+F[4]*F[2]*F[15]-F[4]*F[3]*F[14]-F[12]*F[2]*F[7]+F[12]*F[3]*F[6]),U*(F[0]*F[6]*F[11]-F[0]*F[7]*F[10]-F[4]*F[2]*F[11]+F[4]*F[3]*F[10]+F[8]*F[2]*F[7]-F[8]*F[3]*F[6]),U*(F[4]*F[9]*F[15]-F[4]*F[11]*F[13]-F[8]*F[5]*F[15]+F[8]*F[7]*F[13]+F[12]*F[5]*F[11]-F[12]*F[7]*F[9]),U*(-F[0]*F[9]*F[15]+F[0]*F[11]*F[13]+F[8]*F[1]*F[15]-F[8]*F[3]*F[13]-F[12]*F[1]*F[11]+F[12]*F[3]*F[9]),U*(F[0]*F[5]*F[15]-F[0]*F[7]*F[13]-F[4]*F[1]*F[15]+F[4]*F[3]*F[13]+F[12]*F[1]*F[7]-F[12]*F[3]*F[5]),U*(-F[0]*F[5]*F[11]+F[0]*F[7]*F[9]+F[4]*F[1]*F[11]-F[4]*F[3]*F[9]-F[8]*F[1]*F[7]+F[8]*F[3]*F[5]),U*(-F[4]*F[9]*F[14]+F[4]*F[10]*F[13]+F[8]*F[5]*F[14]-F[8]*F[6]*F[13]-F[12]*F[5]*F[10]+F[12]*F[6]*F[9]),U*(F[0]*F[9]*F[14]-F[0]*F[10]*F[13]-F[8]*F[1]*F[14]+F[8]*F[2]*F[13]+F[12]*F[1]*F[10]-F[12]*F[2]*F[9]),U*(-F[0]*F[5]*F[14]+F[0]*F[6]*F[13]+F[4]*F[1]*F[14]-F[4]*F[2]*F[13]-F[12]*F[1]*F[6]+F[12]*F[2]*F[5]),U*(F[0]*F[5]*F[10]-F[0]*F[6]*F[9]-F[4]*F[1]*F[10]+F[4]*F[2]*F[9]+F[8]*F[1]*F[6]-F[8]*F[2]*F[5]))}static Compose(F,l,U){const Q=l.x,A=l.y,d=l.z,V=l.w,t=Q+Q,B=A+A,e=d+d,s=Q*t,h=Q*B,m=Q*e,p=A*B,S=A*e,o=d*e,y=V*t,G=V*B,K=V*e,z=U.x,q=U.y,_=U.z;return new QF((1-(p+o))*z,(h+K)*z,(m-G)*z,0,(h-K)*q,(1-(s+o))*q,(S+y)*q,0,(m+G)*_,(S-y)*_,(1-(s+p))*_,0,F.x,F.y,F.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class KF extends Event{constructor(F){super("objectAdded"),this.object=F}}class jF extends Event{constructor(F){super("objectRemoved"),this.object=F}}class OF extends Event{constructor(F){super("objectChanged"),this.object=F}}class NF extends oF{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new g,this._rotation=new P,this._scale=new g(1,1,1),this._transform=new QF,this._changeEvent=new OF(this),this.update=()=>{},this.applyPosition=()=>{this.position=new g},this.applyRotation=()=>{this.rotation=new P},this.applyScale=()=>{this.scale=new g(1,1,1)}}_updateMatrix(){this._transform=QF.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(F){this._position.equals(F)||(this._position=F,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(F){this._rotation.equals(F)||(this._rotation=F,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(F){this._scale.equals(F)||(this._scale=F,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let F=new g(0,0,1);return F=this.rotation.apply(F),F}get transform(){return this._transform}}class lF{constructor(F=1,l=0,U=0,Q=0,A=1,d=0,V=0,t=0,B=1){this.buffer=[F,l,U,Q,A,d,V,t,B]}equals(F){if(this.buffer.length!==F.buffer.length)return!1;if(this.buffer===F.buffer)return!0;for(let l=0;l<this.buffer.length;l++)if(this.buffer[l]!==F.buffer[l])return!1;return!0}multiply(F){const l=this.buffer,U=F.buffer;return new lF(U[0]*l[0]+U[3]*l[1]+U[6]*l[2],U[1]*l[0]+U[4]*l[1]+U[7]*l[2],U[2]*l[0]+U[5]*l[1]+U[8]*l[2],U[0]*l[3]+U[3]*l[4]+U[6]*l[5],U[1]*l[3]+U[4]*l[4]+U[7]*l[5],U[2]*l[3]+U[5]*l[4]+U[8]*l[5],U[0]*l[6]+U[3]*l[7]+U[6]*l[8],U[1]*l[6]+U[4]*l[7]+U[7]*l[8],U[2]*l[6]+U[5]*l[7]+U[8]*l[8])}clone(){const F=this.buffer;return new lF(F[0],F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8])}static Eye(F=1){return new lF(F,0,0,0,F,0,0,0,F)}static Diagonal(F){return new lF(F.x,0,0,0,F.y,0,0,0,F.z)}static RotationFromQuaternion(F){return new lF(1-2*F.y*F.y-2*F.z*F.z,2*F.x*F.y-2*F.z*F.w,2*F.x*F.z+2*F.y*F.w,2*F.x*F.y+2*F.z*F.w,1-2*F.x*F.x-2*F.z*F.z,2*F.y*F.z-2*F.x*F.w,2*F.x*F.z-2*F.y*F.w,2*F.y*F.z+2*F.x*F.w,1-2*F.x*F.x-2*F.y*F.y)}static RotationFromEuler(F){const l=Math.cos(F.x),U=Math.sin(F.x),Q=Math.cos(F.y),A=Math.sin(F.y),d=Math.cos(F.z),V=Math.sin(F.z);return new lF(Q*d+A*U*V,-Q*V+A*U*d,A*l,l*V,l*d,-U,-A*d+Q*U*V,A*V+Q*U*d,Q*l)}toString(){return`[${this.buffer.join(", ")}]`}}class VF{constructor(F=0,l=null,U=null,Q=null,A=null){this.changed=!1,this.detached=!1,this._vertexCount=F,this._positions=l||new Float32Array(0),this._rotations=U||new Float32Array(0),this._scales=Q||new Float32Array(0),this._colors=A||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this.translate=d=>{for(let V=0;V<this.vertexCount;V++)this.positions[3*V+0]+=d.x,this.positions[3*V+1]+=d.y,this.positions[3*V+2]+=d.z;this.changed=!0},this.rotate=d=>{const V=lF.RotationFromQuaternion(d).buffer;for(let t=0;t<this.vertexCount;t++){const B=this.positions[3*t+0],e=this.positions[3*t+1],s=this.positions[3*t+2];this.positions[3*t+0]=V[0]*B+V[1]*e+V[2]*s,this.positions[3*t+1]=V[3]*B+V[4]*e+V[5]*s,this.positions[3*t+2]=V[6]*B+V[7]*e+V[8]*s;const h=new P(this.rotations[4*t+1],this.rotations[4*t+2],this.rotations[4*t+3],this.rotations[4*t+0]),m=d.multiply(h);this.rotations[4*t+1]=m.x,this.rotations[4*t+2]=m.y,this.rotations[4*t+3]=m.z,this.rotations[4*t+0]=m.w}this.changed=!0},this.scale=d=>{for(let V=0;V<this.vertexCount;V++)this.positions[3*V+0]*=d.x,this.positions[3*V+1]*=d.y,this.positions[3*V+2]*=d.z,this.scales[3*V+0]*=d.x,this.scales[3*V+1]*=d.y,this.scales[3*V+2]*=d.z;this.changed=!0},this.serialize=()=>{const d=new Uint8Array(this.vertexCount*VF.RowLength),V=new Float32Array(d.buffer),t=new Uint8Array(d.buffer);for(let B=0;B<this.vertexCount;B++)V[8*B+0]=this.positions[3*B+0],V[8*B+1]=this.positions[3*B+1],V[8*B+2]=this.positions[3*B+2],t[32*B+24+0]=this.colors[4*B+0],t[32*B+24+1]=this.colors[4*B+1],t[32*B+24+2]=this.colors[4*B+2],t[32*B+24+3]=this.colors[4*B+3],V[8*B+3+0]=this.scales[3*B+0],V[8*B+3+1]=this.scales[3*B+1],V[8*B+3+2]=this.scales[3*B+2],t[32*B+28+0]=128*this.rotations[4*B+0]+128&255,t[32*B+28+1]=128*this.rotations[4*B+1]+128&255,t[32*B+28+2]=128*this.rotations[4*B+2]+128&255,t[32*B+28+3]=128*this.rotations[4*B+3]+128&255;return d},this.reattach=(d,V,t,B,e)=>{console.assert(d.byteLength===3*this.vertexCount*4,`Expected ${3*this.vertexCount*4} bytes, got ${d.byteLength} bytes`),this._positions=new Float32Array(d),this._rotations=new Float32Array(V),this._scales=new Float32Array(t),this._colors=new Uint8Array(B),this._selection=new Uint8Array(e),this.detached=!1}}static Deserialize(F){const l=F.length/VF.RowLength,U=new Float32Array(3*l),Q=new Float32Array(4*l),A=new Float32Array(3*l),d=new Uint8Array(4*l),V=new Float32Array(F.buffer),t=new Uint8Array(F.buffer);for(let B=0;B<l;B++)U[3*B+0]=V[8*B+0],U[3*B+1]=V[8*B+1],U[3*B+2]=V[8*B+2],Q[4*B+0]=(t[32*B+28+0]-128)/128,Q[4*B+1]=(t[32*B+28+1]-128)/128,Q[4*B+2]=(t[32*B+28+2]-128)/128,Q[4*B+3]=(t[32*B+28+3]-128)/128,A[3*B+0]=V[8*B+3+0],A[3*B+1]=V[8*B+3+1],A[3*B+2]=V[8*B+3+2],d[4*B+0]=t[32*B+24+0],d[4*B+1]=t[32*B+24+1],d[4*B+2]=t[32*B+24+2],d[4*B+3]=t[32*B+24+3];return new VF(l,U,Q,A,d)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}}VF.RowLength=32;class ZF extends NF{constructor(F=void 0){super(),this.selectedChanged=!1,this._selected=!1,this._data=F||new VF,this.applyPosition=()=>{this.data.translate(this.position),this.position=new g},this.applyRotation=()=>{this.data.rotate(this.rotation),this.rotation=new P},this.applyScale=()=>{this.data.scale(this.scale),this.scale=new g(1,1,1)}}saveToFile(F=null){if(!document)return;if(!F){const A=new Date;F=`splat-${A.getFullYear()}-${A.getMonth()+1}-${A.getDate()}.splat`}this.applyRotation(),this.applyScale(),this.applyPosition();const l=this.data.serialize(),U=new Blob([l],{type:"application/octet-stream"}),Q=document.createElement("a");Q.download=F,Q.href=URL.createObjectURL(U),Q.click()}get data(){return this._data}get selected(){return this._selected}set selected(F){this._selected!==F&&(this._selected=F,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}}class LF{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=100,this._width=512,this._height=512,this._projectionMatrix=new QF,this._viewMatrix=new QF,this._viewProj=new QF,this._updateProjectionMatrix=()=>{this._projectionMatrix=new QF(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(F,l)=>{const U=lF.RotationFromQuaternion(l).buffer,Q=F.flat();this._viewMatrix=new QF(U[0],U[1],U[2],0,U[3],U[4],U[5],0,U[6],U[7],U[8],0,-Q[0]*U[0]-Q[1]*U[3]-Q[2]*U[6],-Q[0]*U[1]-Q[1]*U[4]-Q[2]*U[7],-Q[0]*U[2]-Q[1]*U[5]-Q[2]*U[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(F,l)=>{this._width=F,this._height=l,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(F){this._fx!==F&&(this._fx=F,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(F){this._fy!==F&&(this._fy=F,this._updateProjectionMatrix())}get near(){return this._near}set near(F){this._near!==F&&(this._near=F,this._updateProjectionMatrix())}get far(){return this._far}set far(F){this._far!==F&&(this._far=F,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class FF{constructor(F=0,l=0,U=0,Q=0){this.x=F,this.y=l,this.z=U,this.w=Q}equals(F){return this.x===F.x&&this.y===F.y&&this.z===F.z&&this.w===F.w}add(F){return typeof F=="number"?new FF(this.x+F,this.y+F,this.z+F,this.w+F):new FF(this.x+F.x,this.y+F.y,this.z+F.z,this.w+F.w)}subtract(F){return typeof F=="number"?new FF(this.x-F,this.y-F,this.z-F,this.w-F):new FF(this.x-F.x,this.y-F.y,this.z-F.z,this.w-F.w)}multiply(F){return typeof F=="number"?new FF(this.x*F,this.y*F,this.z*F,this.w*F):F instanceof FF?new FF(this.x*F.x,this.y*F.y,this.z*F.z,this.w*F.w):new FF(this.x*F.buffer[0]+this.y*F.buffer[4]+this.z*F.buffer[8]+this.w*F.buffer[12],this.x*F.buffer[1]+this.y*F.buffer[5]+this.z*F.buffer[9]+this.w*F.buffer[13],this.x*F.buffer[2]+this.y*F.buffer[6]+this.z*F.buffer[10]+this.w*F.buffer[14],this.x*F.buffer[3]+this.y*F.buffer[7]+this.z*F.buffer[11]+this.w*F.buffer[15])}dot(F){return this.x*F.x+this.y*F.y+this.z*F.z+this.w*F.w}lerp(F,l){return new FF(this.x+(F.x-this.x)*l,this.y+(F.y-this.y)*l,this.z+(F.z-this.z)*l,this.w+(F.w-this.w)*l)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(F){return Math.sqrt((this.x-F.x)**2+(this.y-F.y)**2+(this.z-F.z)**2+(this.w-F.w)**2)}normalize(){const F=this.magnitude();return new FF(this.x/F,this.y/F,this.z/F,this.w/F)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new FF(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}class PF extends NF{constructor(F=void 0){super(),this._data=F||new LF,this._position=new g(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(l,U)=>{const Q=new FF(l,U,-1,1),A=this._data.projectionMatrix.invert(),d=Q.multiply(A),V=this._data.viewMatrix.invert(),t=d.multiply(V);return new g(t.x/t.w,t.y/t.w,t.z/t.w).subtract(this.position).normalize()}}get data(){return this._data}}class _F extends oF{constructor(){super(),this._objects=[],this.addObject=F=>{this.objects.push(F),this.dispatchEvent(new KF(F))},this.removeObject=F=>{const l=this.objects.indexOf(F);if(l<0)throw new Error("Object not found in scene");this.objects.splice(l,1),this.dispatchEvent(new jF(F))},this.findObject=F=>{for(const l of this.objects)if(F(l))return l},this.findObjectOfType=F=>{for(const l of this.objects)if(l instanceof F)return l},this.reset=()=>{const F=this.objects.slice();for(const l of F)this.removeObject(l)},this.reset()}saveToFile(F=null){if(!document)return;if(!F){const t=new Date;F=`scene-${t.getFullYear()}-${t.getMonth()+1}-${t.getDate()}.splat`}const l=[];let U=0;for(const t of this.objects)if(t.applyRotation(),t.applyScale(),t.applyPosition(),t instanceof ZF){const B=t.data.serialize();l.push(B),U+=t.data.vertexCount}const Q=new Uint8Array(U*VF.RowLength);let A=0;for(const t of l)Q.set(t,A),A+=t.length;const d=new Blob([Q.buffer],{type:"application/octet-stream"}),V=document.createElement("a");V.download=F,V.href=URL.createObjectURL(d),V.click()}get objects(){return this._objects}}class qF{static async LoadAsync(F,l,U,Q=!1){const A=await fetch(F,{mode:"cors",credentials:"omit",cache:Q?"force-cache":"default"});if(A.status!=200)throw new Error(A.status+" Unable to load "+A.url);const d=A.body.getReader(),V=parseInt(A.headers.get("content-length")),t=new Uint8Array(V);let B=0;for(;;){const{done:h,value:m}=await d.read();if(h)break;t.set(m,B),B+=m.length,U==null||U(B/V)}const e=VF.Deserialize(t),s=new ZF(e);return l.addObject(s),s}static async LoadFromFileAsync(F,l,U){const Q=new FileReader;let A=new ZF;return Q.onload=d=>{const V=new Uint8Array(d.target.result),t=VF.Deserialize(V);A=new ZF(t),l.addObject(A)},Q.onprogress=d=>{U==null||U(d.loaded/d.total)},Q.readAsArrayBuffer(F),await new Promise(d=>{Q.onloadend=()=>{d()}}),A}}function $F(X,F,l){var U=F===void 0?null:F,Q=function(t,B){var e=atob(t);if(B){for(var s=new Uint8Array(e.length),h=0,m=e.length;h<m;++h)s[h]=e.charCodeAt(h);return String.fromCharCode.apply(null,new Uint16Array(s.buffer))}return e}(X,l!==void 0&&l),A=Q.indexOf(`
`,10)+1,d=Q.substring(A)+(U?"//# sourceMappingURL="+U:""),V=new Blob([d],{type:"application/javascript"});return URL.createObjectURL(V)}function GF(X,F,l){var U;return function(Q){return U=U||$F(X,F,l),new Worker(U,Q)}}var FU=GF("",null,!1);class UU{constructor(F,l){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=F;const U=F.gl;this._program=U.createProgram(),this._passes=l||[];const Q=U.createShader(U.VERTEX_SHADER);U.shaderSource(Q,this._getVertexSource()),U.compileShader(Q),U.getShaderParameter(Q,U.COMPILE_STATUS)||console.error(U.getShaderInfoLog(Q));const A=U.createShader(U.FRAGMENT_SHADER);U.shaderSource(A,this._getFragmentSource()),U.compileShader(A),U.getShaderParameter(A,U.COMPILE_STATUS)||console.error(U.getShaderInfoLog(A)),U.attachShader(this.program,Q),U.attachShader(this.program,A),U.linkProgram(this.program),U.getProgramParameter(this.program,U.LINK_STATUS)||console.error(U.getProgramInfoLog(this.program)),this.resize=()=>{U.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),U.useProgram(this._program),this._initialize();for(const d of this.passes)d.initialize(this);this._initialized=!0,this._started=!0},this.render=(d,V)=>{U.useProgram(this._program),this._scene===d&&this._camera===V||(this.dispose(),this._scene=d,this._camera=V,this.initialize());for(const t of this.passes)t.render();this._render()},this.dispose=()=>{if(this._initialized){U.useProgram(this._program);for(const d of this.passes)d.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var lU=GF("",null,!1),QU=function(X={}){var F,l,U=X;U.ready=new Promise((Z,n)=>{F=Z,l=n});var Q,A=Object.assign({},U),d="";d=(d=self.location.href).indexOf("blob:")!==0?d.substr(0,d.replace(/[?#].*/,"").lastIndexOf("/")+1):"",Q=Z=>{var n=new XMLHttpRequest;return n.open("GET",Z,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)},U.print||console.log.bind(console);var V,t,B=U.printErr||console.error.bind(console);function e(Z){if(eF(Z))return function(n){for(var W=atob(n),R=new Uint8Array(W.length),c=0;c<W.length;++c)R[c]=W.charCodeAt(c);return R}(Z.slice(aF.length))}Object.assign(U,A),A=null,U.arguments&&U.arguments,U.thisProgram&&U.thisProgram,U.quit&&U.quit,U.wasmBinary&&(V=U.wasmBinary),typeof WebAssembly!="object"&&T("no native wasm support detected");var s,h,m,p,S,o,y,G,K=!1;function z(){var Z=t.buffer;U.HEAP8=s=new Int8Array(Z),U.HEAP16=m=new Int16Array(Z),U.HEAPU8=h=new Uint8Array(Z),U.HEAPU16=p=new Uint16Array(Z),U.HEAP32=S=new Int32Array(Z),U.HEAPU32=o=new Uint32Array(Z),U.HEAPF32=y=new Float32Array(Z),U.HEAPF64=G=new Float64Array(Z)}var q=[],_=[],dF=[],k=0,C=null;function T(Z){var W;(W=U.onAbort)==null||W.call(U,Z),B(Z="Aborted("+Z+")"),K=!0,Z+=". Build with -sASSERTIONS for more info.";var n=new WebAssembly.RuntimeError(Z);throw l(n),n}var $,WF,aF="data:application/octet-stream;base64,",eF=Z=>Z.startsWith(aF);function w(Z){return Promise.resolve().then(()=>function(n){if(n==$&&V)return new Uint8Array(V);var W=e(n);if(W)return W;if(Q)return Q(n);throw"both async and sync fetching of the wasm failed"}(Z))}function a(Z,n,W,R){return function(c,i,J){return w(c).then(b=>WebAssembly.instantiate(b,i)).then(b=>b).then(J,b=>{B(`failed to asynchronously prepare wasm: ${b}`),T(b)})}(n,W,R)}eF($="data:application/octet-stream;base64,")||(WF=$,$=U.locateFile?U.locateFile(WF,d):d+WF);var r=Z=>{for(;Z.length>0;)Z.shift()(U)};U.noExitRuntime;var Y,H,O=Z=>{for(var n="",W=Z;h[W];)n+=Y[h[W++]];return n},tF={},M={},L=Z=>{throw new H(Z)};function D(Z,n,W={}){if(!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(R,c,i={}){var J=c.name;if(R||L(`type "${J}" must have a positive integer typeid pointer`),M.hasOwnProperty(R)){if(i.ignoreDuplicateRegistrations)return;L(`Cannot register type '${J}' twice`)}if(M[R]=c,tF.hasOwnProperty(R)){var b=tF[R];delete tF[R],b.forEach(I=>I())}}(Z,n,W)}function UF(){this.allocated=[void 0],this.freelist=[]}var j=new UF,hF=()=>{for(var Z=0,n=j.reserved;n<j.allocated.length;++n)j.allocated[n]!==void 0&&++Z;return Z},SF=Z=>(Z||L("Cannot use deleted val. handle = "+Z),j.get(Z).value),YF=Z=>{switch(Z){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return j.allocate({refcount:1,value:Z})}};function JF(Z){return this.fromWireType(S[Z>>2])}var yF=(Z,n)=>{switch(n){case 4:return function(W){return this.fromWireType(y[W>>2])};case 8:return function(W){return this.fromWireType(G[W>>3])};default:throw new TypeError(`invalid float width (${n}): ${Z}`)}},kF=(Z,n,W)=>{switch(n){case 1:return W?R=>s[R>>0]:R=>h[R>>0];case 2:return W?R=>m[R>>1]:R=>p[R>>1];case 4:return W?R=>S[R>>2]:R=>o[R>>2];default:throw new TypeError(`invalid integer width (${n}): ${Z}`)}};function uF(Z){return this.fromWireType(o[Z>>2])}var IF=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,TF=(Z,n)=>Z?((W,R,c)=>{for(var i=R+c,J=R;W[J]&&!(J>=i);)++J;if(J-R>16&&W.buffer&&IF)return IF.decode(W.subarray(R,J));for(var b="";R<J;){var I=W[R++];if(128&I){var N=63&W[R++];if((224&I)!=192){var v=63&W[R++];if((I=(240&I)==224?(15&I)<<12|N<<6|v:(7&I)<<18|N<<12|v<<6|63&W[R++])<65536)b+=String.fromCharCode(I);else{var x=I-65536;b+=String.fromCharCode(55296|x>>10,56320|1023&x)}}else b+=String.fromCharCode((31&I)<<6|N)}else b+=String.fromCharCode(I)}return b})(h,Z,n):"",bF=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,HF=(Z,n)=>{for(var W=Z,R=W>>1,c=R+n/2;!(R>=c)&&p[R];)++R;if((W=R<<1)-Z>32&&bF)return bF.decode(h.subarray(Z,W));for(var i="",J=0;!(J>=n/2);++J){var b=m[Z+2*J>>1];if(b==0)break;i+=String.fromCharCode(b)}return i},DF=(Z,n,W)=>{if(W??(W=2147483647),W<2)return 0;for(var R=n,c=(W-=2)<2*Z.length?W/2:Z.length,i=0;i<c;++i){var J=Z.charCodeAt(i);m[n>>1]=J,n+=2}return m[n>>1]=0,n-R},xF=Z=>2*Z.length,zF=(Z,n)=>{for(var W=0,R="";!(W>=n/4);){var c=S[Z+4*W>>2];if(c==0)break;if(++W,c>=65536){var i=c-65536;R+=String.fromCharCode(55296|i>>10,56320|1023&i)}else R+=String.fromCharCode(c)}return R},wF=(Z,n,W)=>{if(W??(W=2147483647),W<4)return 0;for(var R=n,c=R+W-4,i=0;i<Z.length;++i){var J=Z.charCodeAt(i);if(J>=55296&&J<=57343&&(J=65536+((1023&J)<<10)|1023&Z.charCodeAt(++i)),S[n>>2]=J,(n+=4)+4>c)break}return S[n>>2]=0,n-R},MF=Z=>{for(var n=0,W=0;W<Z.length;++W){var R=Z.charCodeAt(W);R>=55296&&R<=57343&&++W,n+=4}return n},vF=Z=>{var n=(Z-t.buffer.byteLength+65535)/65536;try{return t.grow(n),z(),1}catch{}};(()=>{for(var Z=new Array(256),n=0;n<256;++n)Z[n]=String.fromCharCode(n);Y=Z})(),H=U.BindingError=class extends Error{constructor(Z){super(Z),this.name="BindingError"}},U.InternalError=class extends Error{constructor(Z){super(Z),this.name="InternalError"}},Object.assign(UF.prototype,{get(Z){return this.allocated[Z]},has(Z){return this.allocated[Z]!==void 0},allocate(Z){var n=this.freelist.pop()||this.allocated.length;return this.allocated[n]=Z,n},free(Z){this.allocated[Z]=void 0,this.freelist.push(Z)}}),j.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),j.reserved=j.allocated.length,U.count_emval_handles=hF;var fF={f:(Z,n,W,R,c)=>{},i:(Z,n,W,R)=>{D(Z,{name:n=O(n),fromWireType:function(c){return!!c},toWireType:function(c,i){return i?W:R},argPackAdvance:8,readValueFromPointer:function(c){return this.fromWireType(h[c])},destructorFunction:null})},h:(Z,n)=>{D(Z,{name:n=O(n),fromWireType:W=>{var R=SF(W);return(c=>{c>=j.reserved&&--j.get(c).refcount==0&&j.free(c)})(W),R},toWireType:(W,R)=>YF(R),argPackAdvance:8,readValueFromPointer:JF,destructorFunction:null})},e:(Z,n,W)=>{D(Z,{name:n=O(n),fromWireType:R=>R,toWireType:(R,c)=>c,argPackAdvance:8,readValueFromPointer:yF(n,W),destructorFunction:null})},b:(Z,n,W,R,c)=>{n=O(n);var i=I=>I;if(R===0){var J=32-8*W;i=I=>I<<J>>>J}var b=n.includes("unsigned");D(Z,{name:n,fromWireType:i,toWireType:b?function(I,N){return this.name,N>>>0}:function(I,N){return this.name,N},argPackAdvance:8,readValueFromPointer:kF(n,W,R!==0),destructorFunction:null})},a:(Z,n,W)=>{var R=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function c(i){var J=o[i>>2],b=o[i+4>>2];return new R(s.buffer,b,J)}D(Z,{name:W=O(W),fromWireType:c,argPackAdvance:8,readValueFromPointer:c},{ignoreDuplicateRegistrations:!0})},d:(Z,n)=>{var W=(n=O(n))==="std::string";D(Z,{name:n,fromWireType(R){var c,i=o[R>>2],J=R+4;if(W)for(var b=J,I=0;I<=i;++I){var N=J+I;if(I==i||h[N]==0){var v=TF(b,N-b);c===void 0?c=v:(c+="\0",c+=v),b=N+1}}else{var x=new Array(i);for(I=0;I<i;++I)x[I]=String.fromCharCode(h[J+I]);c=x.join("")}return AF(R),c},toWireType(R,c){var i;c instanceof ArrayBuffer&&(c=new Uint8Array(c));var J=typeof c=="string";J||c instanceof Uint8Array||c instanceof Uint8ClampedArray||c instanceof Int8Array||L("Cannot pass non-string to std::string"),i=W&&J?(x=>{for(var u=0,E=0;E<x.length;++E){var BF=x.charCodeAt(E);BF<=127?u++:BF<=2047?u+=2:BF>=55296&&BF<=57343?(u+=4,++E):u+=3}return u})(c):c.length;var b=sF(4+i+1),I=b+4;if(o[b>>2]=i,W&&J)((x,u,E,BF)=>{if(!(BF>0))return 0;for(var RF=E+BF-1,iF=0;iF<x.length;++iF){var f=x.charCodeAt(iF);if(f>=55296&&f<=57343&&(f=65536+((1023&f)<<10)|1023&x.charCodeAt(++iF)),f<=127){if(E>=RF)break;u[E++]=f}else if(f<=2047){if(E+1>=RF)break;u[E++]=192|f>>6,u[E++]=128|63&f}else if(f<=65535){if(E+2>=RF)break;u[E++]=224|f>>12,u[E++]=128|f>>6&63,u[E++]=128|63&f}else{if(E+3>=RF)break;u[E++]=240|f>>18,u[E++]=128|f>>12&63,u[E++]=128|f>>6&63,u[E++]=128|63&f}}u[E]=0})(c,h,I,i+1);else if(J)for(var N=0;N<i;++N){var v=c.charCodeAt(N);v>255&&(AF(I),L("String has UTF-16 code units that do not fit in 8 bits")),h[I+N]=v}else for(N=0;N<i;++N)h[I+N]=c[N];return R!==null&&R.push(AF,b),b},argPackAdvance:8,readValueFromPointer:uF,destructorFunction(R){AF(R)}})},c:(Z,n,W)=>{var R,c,i,J,b;W=O(W),n===2?(R=HF,c=DF,J=xF,i=()=>p,b=1):n===4&&(R=zF,c=wF,J=MF,i=()=>o,b=2),D(Z,{name:W,fromWireType:I=>{for(var N,v=o[I>>2],x=i(),u=I+4,E=0;E<=v;++E){var BF=I+4+E*n;if(E==v||x[BF>>b]==0){var RF=R(u,BF-u);N===void 0?N=RF:(N+="\0",N+=RF),u=BF+n}}return AF(I),N},toWireType:(I,N)=>{typeof N!="string"&&L(`Cannot pass non-string to C++ string type ${W}`);var v=J(N),x=sF(4+v+n);return o[x>>2]=v>>b,c(N,x+4,v+n),I!==null&&I.push(AF,x),x},argPackAdvance:8,readValueFromPointer:JF,destructorFunction(I){AF(I)}})},j:(Z,n)=>{D(Z,{isVoid:!0,name:n=O(n),argPackAdvance:0,fromWireType:()=>{},toWireType:(W,R)=>{}})},g:Z=>{var n=h.length,W=2147483648;if((Z>>>=0)>W)return!1;for(var R,c,i=1;i<=4;i*=2){var J=n*(1+.2/i);J=Math.min(J,Z+100663296);var b=Math.min(W,(R=Math.max(Z,J))+((c=65536)-R%c)%c);if(vF(b))return!0}return!1}},nF=function(){var W;var Z={a:fF};function n(R,c){var i;return nF=R.exports,t=nF.k,z(),i=nF.l,_.unshift(i),function(J){var I;if(k--,(I=U.monitorRunDependencies)==null||I.call(U,k),k==0&&C){var b=C;C=null,b()}}(),nF}if(k++,(W=U.monitorRunDependencies)==null||W.call(U,k),U.instantiateWasm)try{return U.instantiateWasm(Z,n)}catch(R){B(`Module.instantiateWasm callback failed with error: ${R}`),l(R)}return a(0,$,Z,function(R){n(R.instance)}).catch(l),{}}();U._pack=(Z,n,W,R,c,i,J,b,I,N,v)=>(U._pack=nF.m)(Z,n,W,R,c,i,J,b,I,N,v);var cF,sF=U._malloc=Z=>(sF=U._malloc=nF.o)(Z),AF=U._free=Z=>(AF=U._free=nF.p)(Z);function mF(){function Z(){cF||(cF=!0,U.calledRun=!0,K||(r(_),F(U),U.onRuntimeInitialized&&U.onRuntimeInitialized(),function(){if(U.postRun)for(typeof U.postRun=="function"&&(U.postRun=[U.postRun]);U.postRun.length;)n=U.postRun.shift(),dF.unshift(n);var n;r(dF)}()))}k>0||(function(){if(U.preRun)for(typeof U.preRun=="function"&&(U.preRun=[U.preRun]);U.preRun.length;)n=U.preRun.shift(),q.unshift(n);var n;r(q)}(),k>0||(U.setStatus?(U.setStatus("Running..."),setTimeout(function(){setTimeout(function(){U.setStatus("")},1),Z()},1)):Z()))}if(C=function Z(){cF||mF(),cF||(C=Z)},U.preInit)for(typeof U.preInit=="function"&&(U.preInit=[U.preInit]);U.preInit.length>0;)U.preInit.pop()();return mF(),X.ready};class BU{constructor(F){this.dataChanged=!1,this.transformsChanged=!1,this._updating=new Set,this._dirty=new Set;let l=0,U=0;this._splatIndices=new Map,this._offsets=new Map;const Q=new Map;for(const B of F.objects)B instanceof ZF&&(this._splatIndices.set(B,U),this._offsets.set(B,l),Q.set(l,B),l+=B.data.vertexCount,U++);this._vertexCount=l,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=Q.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new lU;const A=B=>{const e=this._splatIndices.get(B);this._transforms.set(B.transform.buffer,20*e),this._transforms[20*e+16]=B.selected?1:0,B.positionChanged=!1,B.rotationChanged=!1,B.scaleChanged=!1,B.selectedChanged=!1,this.transformsChanged=!0};let d;this._worker.onmessage=B=>{if(B.data.response){const e=B.data.response,s=Q.get(e.offset);A(s);const h=this._splatIndices.get(s);for(let m=0;m<s.data.vertexCount;m++)this._transformIndices[e.offset+m]=h;this._data.set(e.data,8*e.offset),s.data.reattach(e.positions,e.rotations,e.scales,e.colors,e.selection),this._positions.set(e.worldPositions,3*e.offset),this._rotations.set(e.worldRotations,4*e.offset),this._scales.set(e.worldScales,3*e.offset),this._updating.delete(s),s.selectedChanged=!1,this.dataChanged=!0}},async function(){d=await QU()}();const V=B=>{if(!d)return void async function(){for(;!d;)await new Promise(C=>setTimeout(C,0))}().then(()=>{V(B)});A(B);const e=d._malloc(3*B.data.vertexCount*4),s=d._malloc(4*B.data.vertexCount*4),h=d._malloc(3*B.data.vertexCount*4),m=d._malloc(4*B.data.vertexCount),p=d._malloc(B.data.vertexCount),S=d._malloc(8*B.data.vertexCount*4),o=d._malloc(3*B.data.vertexCount*4),y=d._malloc(4*B.data.vertexCount*4),G=d._malloc(3*B.data.vertexCount*4);d.HEAPF32.set(B.data.positions,e/4),d.HEAPF32.set(B.data.rotations,s/4),d.HEAPF32.set(B.data.scales,h/4),d.HEAPU8.set(B.data.colors,m),d.HEAPU8.set(B.data.selection,p),d._pack(B.selected,B.data.vertexCount,e,s,h,m,p,S,o,y,G);const K=new Uint32Array(d.HEAPU32.buffer,S,8*B.data.vertexCount),z=new Float32Array(d.HEAPF32.buffer,o,3*B.data.vertexCount),q=new Float32Array(d.HEAPF32.buffer,y,4*B.data.vertexCount),_=new Float32Array(d.HEAPF32.buffer,G,3*B.data.vertexCount),dF=this._splatIndices.get(B),k=this._offsets.get(B);for(let C=0;C<B.data.vertexCount;C++)this._transformIndices[k+C]=dF;this._data.set(K,8*k),this._positions.set(z,3*k),this._rotations.set(q,4*k),this._scales.set(_,3*k),d._free(e),d._free(s),d._free(h),d._free(m),d._free(p),d._free(S),d._free(o),d._free(y),d._free(G),this.dataChanged=!0},t=B=>{if((B.positionChanged||B.rotationChanged||B.scaleChanged||B.selectedChanged)&&A(B),!B.data.changed||B.data.detached)return;const e={position:new Float32Array(B.position.flat()),rotation:new Float32Array(B.rotation.flat()),scale:new Float32Array(B.scale.flat()),selected:B.selected,vertexCount:B.data.vertexCount,positions:B.data.positions,rotations:B.data.rotations,scales:B.data.scales,colors:B.data.colors,selection:B.data.selection,offset:this._offsets.get(B)};this._worker.postMessage({splat:e},[e.position.buffer,e.rotation.buffer,e.scale.buffer,e.positions.buffer,e.rotations.buffer,e.scales.buffer,e.colors.buffer,e.selection.buffer]),this._updating.add(B),B.data.detached=!0};this.getSplat=B=>{let e=null;for(const[s,h]of this._offsets){if(!(B>=h))break;e=s}return e},this.getLocalIndex=(B,e)=>e-this._offsets.get(B),this.markDirty=B=>{this._dirty.add(B)},this.rebuild=()=>{for(const B of this._dirty)t(B);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const B of this._splatIndices.keys())V(B)}get offsets(){return this._offsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class rF{constructor(F=0,l=0,U=0,Q=255){this.r=F,this.g=l,this.b=U,this.a=Q}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map(F=>F.toString(16).padStart(2,"0")).join("")}toString(){return`[${this.flat().join(", ")}]`}}class XF extends UU{constructor(F,l){super(F,l),this._outlineThickness=10,this._outlineColor=new rF(255,165,0,255),this._renderData=null,this._depthIndex=null,this._chunks=null,this._splatTexture=null;const U=F.canvas,Q=F.gl;let A,d,V,t,B,e,s,h,m,p,S,o,y,G,K,z;this._resize=()=>{this._camera&&(this._camera.data.setSize(U.width,U.height),this._camera.update(),d=Q.getUniformLocation(this.program,"projection"),Q.uniformMatrix4fv(d,!1,this._camera.data.projectionMatrix.buffer),V=Q.getUniformLocation(this.program,"viewport"),Q.uniform2fv(V,new Float32Array([U.width,U.height])))};const q=()=>{A=new FU,A.onmessage=C=>{if(C.data.depthIndex){const{depthIndex:T,chunks:$}=C.data;this._depthIndex=T,this._chunks=$,Q.bindBuffer(Q.ARRAY_BUFFER,z),Q.bufferData(Q.ARRAY_BUFFER,T,Q.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",_),this._scene.addEventListener("objectRemoved",dF);for(const C of this._scene.objects)C instanceof ZF&&C.addEventListener("objectChanged",k);this._renderData=new BU(this._scene),t=Q.getUniformLocation(this.program,"focal"),Q.uniform2fv(t,new Float32Array([this._camera.data.fx,this._camera.data.fy])),B=Q.getUniformLocation(this.program,"view"),Q.uniformMatrix4fv(B,!1,this._camera.data.viewMatrix.buffer),m=Q.getUniformLocation(this.program,"outlineThickness"),Q.uniform1f(m,this.outlineThickness),p=Q.getUniformLocation(this.program,"outlineColor"),Q.uniform4fv(p,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=Q.createTexture(),e=Q.getUniformLocation(this.program,"u_texture"),Q.uniform1i(e,0),y=Q.createTexture(),s=Q.getUniformLocation(this.program,"u_transforms"),Q.uniform1i(s,1),G=Q.createTexture(),h=Q.getUniformLocation(this.program,"u_transformIndices"),Q.uniform1i(h,2),K=Q.createBuffer(),Q.bindBuffer(Q.ARRAY_BUFFER,K),Q.bufferData(Q.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),Q.STATIC_DRAW),S=Q.getAttribLocation(this.program,"position"),Q.enableVertexAttribArray(S),Q.vertexAttribPointer(S,2,Q.FLOAT,!1,0,0),z=Q.createBuffer(),o=Q.getAttribLocation(this.program,"index"),Q.enableVertexAttribArray(o),Q.bindBuffer(Q.ARRAY_BUFFER,z),q()}else console.error("Cannot render without scene and camera")};const _=C=>{const T=C;T.object instanceof ZF&&T.object.addEventListener("objectChanged",k),this.dispose()},dF=C=>{const T=C;T.object instanceof ZF&&T.object.removeEventListener("objectChanged",k),this.dispose()},k=C=>{const T=C;T.object instanceof ZF&&this._renderData&&this._renderData.markDirty(T.object)};this._render=()=>{if(this._scene&&this._camera&&this.renderData){if(this._camera.update(),A.postMessage({viewProj:this._camera.data.viewProj}),this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged){this.renderData.dataChanged&&(Q.activeTexture(Q.TEXTURE0),Q.bindTexture(Q.TEXTURE_2D,this.splatTexture),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_S,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_T,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MIN_FILTER,Q.NEAREST),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MAG_FILTER,Q.NEAREST),Q.texImage2D(Q.TEXTURE_2D,0,Q.RGBA32UI,this.renderData.width,this.renderData.height,0,Q.RGBA_INTEGER,Q.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(Q.activeTexture(Q.TEXTURE1),Q.bindTexture(Q.TEXTURE_2D,y),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_S,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_T,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MIN_FILTER,Q.NEAREST),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MAG_FILTER,Q.NEAREST),Q.texImage2D(Q.TEXTURE_2D,0,Q.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,Q.RGBA,Q.FLOAT,this.renderData.transforms),Q.activeTexture(Q.TEXTURE2),Q.bindTexture(Q.TEXTURE_2D,G),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_S,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_WRAP_T,Q.CLAMP_TO_EDGE),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MIN_FILTER,Q.NEAREST),Q.texParameteri(Q.TEXTURE_2D,Q.TEXTURE_MAG_FILTER,Q.NEAREST),Q.texImage2D(Q.TEXTURE_2D,0,Q.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,Q.RED_INTEGER,Q.UNSIGNED_INT,this.renderData.transformIndices));const C=new Float32Array(this.renderData.positions.slice().buffer),T=new Float32Array(this.renderData.transforms.slice().buffer),$=new Uint32Array(this.renderData.transformIndices.slice().buffer);A.postMessage({sortData:{positions:C,transforms:T,transformIndices:$,vertexCount:this.renderData.vertexCount}},[C.buffer,T.buffer,$.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1}Q.viewport(0,0,U.width,U.height),Q.clearColor(0,0,0,0),Q.clear(Q.COLOR_BUFFER_BIT),Q.disable(Q.DEPTH_TEST),Q.enable(Q.BLEND),Q.blendFuncSeparate(Q.ONE_MINUS_DST_ALPHA,Q.ONE,Q.ONE_MINUS_DST_ALPHA,Q.ONE),Q.blendEquationSeparate(Q.FUNC_ADD,Q.FUNC_ADD),Q.uniformMatrix4fv(d,!1,this._camera.data.projectionMatrix.buffer),Q.uniformMatrix4fv(B,!1,this._camera.data.viewMatrix.buffer),Q.bindBuffer(Q.ARRAY_BUFFER,K),Q.vertexAttribPointer(S,2,Q.FLOAT,!1,0,0),Q.bindBuffer(Q.ARRAY_BUFFER,z),Q.vertexAttribIPointer(o,1,Q.INT,0,0),Q.vertexAttribDivisor(o,1),Q.drawArraysInstanced(Q.TRIANGLE_FAN,0,4,this.renderData.vertexCount)}else console.error("Cannot render without scene and camera")},this._dispose=()=>{if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",_),this._scene.removeEventListener("objectRemoved",dF);for(const C of this._scene.objects)C instanceof ZF&&C.removeEventListener("objectChanged",k);A.terminate(),this.renderData.dispose(),Q.deleteTexture(this.splatTexture),Q.deleteTexture(y),Q.deleteTexture(G),Q.deleteBuffer(z),Q.deleteBuffer(K)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=C=>{this._outlineThickness=C,this._initialized&&Q.uniform1f(m,C)},this._setOutlineColor=C=>{this._outlineColor=C,this._initialized&&Q.uniform4fv(p,new Float32Array(C.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get chunks(){return this._chunks}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(F){this._setOutlineThickness(F)}get outlineColor(){return this._outlineColor}set outlineColor(F){this._setOutlineColor(F)}_getVertexSource(){return`#version 300 es
precision highp float;
precision highp int;

uniform highp usampler2D u_texture;
uniform highp sampler2D u_transforms;
uniform highp usampler2D u_transformIndices;
uniform mat4 projection, view;
uniform vec2 focal;
uniform vec2 viewport;

uniform bool useDepthFade;
uniform float depthFade;

in vec2 position;
in int index;

out vec4 vColor;
out vec2 vPosition;
out float vSize;
out float vSelected;

void main () {
    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);
    float selected = float((cen.w >> 24) & 0xffu);

    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;
    mat4 transform = mat4(
        texelFetch(u_transforms, ivec2(0, transformIndex), 0),
        texelFetch(u_transforms, ivec2(1, transformIndex), 0),
        texelFetch(u_transforms, ivec2(2, transformIndex), 0),
        texelFetch(u_transforms, ivec2(3, transformIndex), 0)
    );

    if (selected < 0.5) {
        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;
    }

    mat4 viewTransform = view * transform;

    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);
    vec4 pos2d = projection * cam;

    float clip = 1.2 * pos2d.w;
    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {
        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
        return;
    }

    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);
    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);
    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);

    mat3 J = mat3(
        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), 
        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), 
        0., 0., 0.
    );

    mat3 T = transpose(mat3(viewTransform)) * J;
    mat3 cov2d = transpose(T) * Vrk * T;

    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;
    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));
    float lambda1 = mid + radius, lambda2 = mid - radius;

    if (lambda2 < 0.0) return;
    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));
    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;
    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);

    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;
    vPosition = position;
    vSize = length(majorAxis);
    vSelected = selected;

    float scalingFactor = 1.0;

    if (useDepthFade) {
        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;
        float near = 0.1; float far = 100.0;
        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));
        float start = max(normalizedDepth - 0.1, 0.0);
        float end = min(normalizedDepth + 0.1, 1.0);
        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);
    }

    vec2 vCenter = vec2(pos2d) / pos2d.w;
    gl_Position = vec4(
        vCenter 
        + position.x * majorAxis * scalingFactor / viewport
        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);
}
`}_getFragmentSource(){return`#version 300 es
precision highp float;

uniform float outlineThickness;
uniform vec4 outlineColor;

in vec4 vColor;
in vec2 vPosition;
in float vSize;
in float vSelected;

out vec4 fragColor;

void main () {
    float A = -dot(vPosition, vPosition);

    if (A < -4.0) discard;

    if (vSelected < 0.5) {
        float B = exp(A) * vColor.a;
        fragColor = vec4(B * vColor.rgb, B);
        return;
    }

    float outlineThreshold = -4.0 + (outlineThickness / vSize);

    if (A < outlineThreshold) {
        fragColor = outlineColor;
    } 
    else {
        float B = exp(A) * vColor.a;
        fragColor = vec4(B * vColor.rgb, B);
    }
}
`}}class dU{constructor(F=1){let l,U,Q,A,d=0,V=!1;this.initialize=t=>{if(!(t instanceof XF))throw new Error("FadeInPass requires a RenderProgram");d=t.started?1:0,V=!0,l=t,U=t.renderer.gl,Q=U.getUniformLocation(l.program,"useDepthFade"),U.uniform1i(Q,1),A=U.getUniformLocation(l.program,"depthFade"),U.uniform1f(A,d)},this.render=()=>{var t;V&&!(!((t=l.renderData)===null||t===void 0)&&t.updating)&&(U.useProgram(l.program),d=Math.min(d+.01*F,1),d>=1&&(V=!1,U.uniform1i(Q,0)),U.uniform1f(A,d))}}dispose(){}}class tU{constructor(F=null,l=null){this._backgroundColor=new rF;const U=F||document.createElement("canvas");F||(U.style.display="block",U.style.boxSizing="border-box",U.style.width="100%",U.style.height="100%",U.style.margin="0",U.style.padding="0",document.body.appendChild(U)),U.style.background=this._backgroundColor.toHexString(),this._canvas=U,this._gl=U.getContext("webgl2",{antialias:!1});const Q=l||[];l||Q.push(new dU),this._renderProgram=new XF(this,Q);const A=[this._renderProgram];this.resize=()=>{const d=U.clientWidth,V=U.clientHeight;U.width===d&&U.height===V||this.setSize(d,V)},this.setSize=(d,V)=>{U.width=d,U.height=V,this._gl.viewport(0,0,U.width,U.height);for(const t of A)t.resize()},this.render=(d,V)=>{for(const t of A)t.render(d,V)},this.dispose=()=>{for(const d of A)d.dispose()},this.addProgram=d=>{A.push(d)},this.removeProgram=d=>{const V=A.indexOf(d);if(V<0)throw new Error("Program not found");A.splice(V,1)},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(F){this._backgroundColor=F,this._canvas.style.background=F.toHexString()}}class ZU{constructor(F,l,U=.5,Q=.5,A=5,d=!0,V=new g){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let t=V.clone(),B=t.clone(),e=U,s=Q,h=A,m=!1,p=!1,S=0,o=0,y=0;const G={};let K=!1;F.addEventListener("objectChanged",()=>{if(K)return;const a=F.rotation.toEuler();e=-a.y,s=-a.x;const r=F.position.x-h*Math.sin(e)*Math.cos(s),Y=F.position.y+h*Math.sin(s),H=F.position.z+h*Math.cos(e)*Math.cos(s);B=new g(r,Y,H)}),this.setCameraTarget=a=>{const r=a.x-F.position.x,Y=a.y-F.position.y,H=a.z-F.position.z;h=Math.sqrt(r*r+Y*Y+H*H),s=Math.atan2(Y,Math.sqrt(r*r+H*H)),e=-Math.atan2(r,H),B=new g(a.x,a.y,a.z)};const z=()=>.1+.9*(h-this.minZoom)/(this.maxZoom-this.minZoom),q=a=>{G[a.code]=!0,a.code==="ArrowUp"&&(G.KeyW=!0),a.code==="ArrowDown"&&(G.KeyS=!0),a.code==="ArrowLeft"&&(G.KeyA=!0),a.code==="ArrowRight"&&(G.KeyD=!0)},_=a=>{G[a.code]=!1,a.code==="ArrowUp"&&(G.KeyW=!1),a.code==="ArrowDown"&&(G.KeyS=!1),a.code==="ArrowLeft"&&(G.KeyA=!1),a.code==="ArrowRight"&&(G.KeyD=!1)},dF=a=>{w(a),m=!0,p=a.button===2,o=a.clientX,y=a.clientY,window.addEventListener("mouseup",k)},k=a=>{w(a),m=!1,p=!1,window.removeEventListener("mouseup",k)},C=a=>{if(w(a),!m||!F)return;const r=a.clientX-o,Y=a.clientY-y;if(p){const H=z(),O=-r*this.panSpeed*.01*H,tF=-Y*this.panSpeed*.01*H,M=lF.RotationFromQuaternion(F.rotation).buffer,L=new g(M[0],M[3],M[6]),D=new g(M[1],M[4],M[7]);B=B.add(L.multiply(O)),B=B.add(D.multiply(tF))}else e-=r*this.orbitSpeed*.003,s+=Y*this.orbitSpeed*.003,s=Math.min(Math.max(s,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);o=a.clientX,y=a.clientY},T=a=>{w(a);const r=z();h+=a.deltaY*this.zoomSpeed*.025*r,h=Math.min(Math.max(h,this.minZoom),this.maxZoom)},$=a=>{if(w(a),a.touches.length===1)m=!0,p=!1,o=a.touches[0].clientX,y=a.touches[0].clientY,S=0;else if(a.touches.length===2){m=!0,p=!0,o=(a.touches[0].clientX+a.touches[1].clientX)/2,y=(a.touches[0].clientY+a.touches[1].clientY)/2;const r=a.touches[0].clientX-a.touches[1].clientX,Y=a.touches[0].clientY-a.touches[1].clientY;S=Math.sqrt(r*r+Y*Y)}},WF=a=>{w(a),m=!1,p=!1},aF=a=>{if(w(a),m&&F)if(p){const r=z(),Y=a.touches[0].clientX-a.touches[1].clientX,H=a.touches[0].clientY-a.touches[1].clientY,O=Math.sqrt(Y*Y+H*H);h+=(S-O)*this.zoomSpeed*.1*r,h=Math.min(Math.max(h,this.minZoom),this.maxZoom),S=O;const tF=(a.touches[0].clientX+a.touches[1].clientX)/2,M=(a.touches[0].clientY+a.touches[1].clientY)/2,L=tF-o,D=M-y,UF=lF.RotationFromQuaternion(F.rotation).buffer,j=new g(UF[0],UF[3],UF[6]),hF=new g(UF[1],UF[4],UF[7]);B=B.add(j.multiply(-L*this.panSpeed*.025*r)),B=B.add(hF.multiply(-D*this.panSpeed*.025*r)),o=tF,y=M}else{const r=a.touches[0].clientX-o,Y=a.touches[0].clientY-y;e-=r*this.orbitSpeed*.003,s+=Y*this.orbitSpeed*.003,s=Math.min(Math.max(s,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),o=a.touches[0].clientX,y=a.touches[0].clientY}},eF=(a,r,Y)=>(1-Y)*a+Y*r;this.update=()=>{K=!0,U=eF(U,e,this.dampening),Q=eF(Q,s,this.dampening),A=eF(A,h,this.dampening),t=t.lerp(B,this.dampening);const a=t.x+A*Math.sin(U)*Math.cos(Q),r=t.y-A*Math.sin(Q),Y=t.z-A*Math.cos(U)*Math.cos(Q);F.position=new g(a,r,Y);const H=t.subtract(F.position).normalize(),O=Math.asin(-H.y),tF=Math.atan2(H.x,H.z);F.rotation=P.FromEuler(new g(O,tF,0));const M=.025,L=.01,D=lF.RotationFromQuaternion(F.rotation).buffer,UF=new g(-D[2],-D[5],-D[8]),j=new g(D[0],D[3],D[6]);G.KeyS&&(B=B.add(UF.multiply(M))),G.KeyW&&(B=B.subtract(UF.multiply(M))),G.KeyA&&(B=B.subtract(j.multiply(M))),G.KeyD&&(B=B.add(j.multiply(M))),G.KeyE&&(e+=L),G.KeyQ&&(e-=L),G.KeyR&&(s+=L),G.KeyF&&(s-=L),K=!1};const w=a=>{a.preventDefault(),a.stopPropagation()};this.dispose=()=>{l.removeEventListener("dragenter",w),l.removeEventListener("dragover",w),l.removeEventListener("dragleave",w),l.removeEventListener("contextmenu",w),l.removeEventListener("mousedown",dF),l.removeEventListener("mousemove",C),l.removeEventListener("wheel",T),l.removeEventListener("touchstart",$),l.removeEventListener("touchend",WF),l.removeEventListener("touchmove",aF),d&&(window.removeEventListener("keydown",q),window.removeEventListener("keyup",_))},d&&(window.addEventListener("keydown",q),window.addEventListener("keyup",_)),l.addEventListener("dragenter",w),l.addEventListener("dragover",w),l.addEventListener("dragleave",w),l.addEventListener("contextmenu",w),l.addEventListener("mousedown",dF),l.addEventListener("mousemove",C),l.addEventListener("wheel",T),l.addEventListener("touchstart",$),l.addEventListener("touchend",WF),l.addEventListener("touchmove",aF),this.update()}}const EF=document.getElementById("canvas"),VU=document.getElementById("progress-dialog"),AU=document.getElementById("progress-indicator"),CF=new tU(EF),gF=new _F,pF=new PF,nU=new ZU(pF,EF);async function RU(){const X="https://huggingface.co/datasets/dylanebert/3dgs/resolve/main/bonsai/bonsai-7k-mini.splat";await qF.LoadAsync(X,gF,U=>AU.value=U*100),VU.close();const F=()=>{CF.setSize(window.innerWidth,window.innerHeight)},l=()=>{nU.update(),CF.render(gF,pF),requestAnimationFrame(l)};F(),window.addEventListener("resize",F),requestAnimationFrame(l)}RU();
